
Projeto micro modularizado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c48  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08000d78  08000d78  00001d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f30  08000f30  00001f38  2**0
                  CONTENTS
  4 .ARM          00000000  08000f30  08000f30  00001f38  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f30  08000f38  00001f38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f30  08000f30  00001f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f34  08000f34  00001f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001f38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  08000f38  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000f38  00002038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000181a  00000000  00000000  00001f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008e8  00000000  00000000  0000377b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00004068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000124  00000000  00000000  00004228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010488  00000000  00000000  0000434c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002983  00000000  00000000  000147d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054b64  00000000  00000000  00017157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006bcbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000049c  00000000  00000000  0006bd00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0006c19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d60 	.word	0x08000d60

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d60 	.word	0x08000d60

08000170 <I2C1_setup>:

#define OLED_ADDRESS  0x3C



void I2C1_setup(void) {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000174:	4b18      	ldr	r3, [pc, #96]	@ (80001d8 <I2C1_setup+0x68>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a17      	ldr	r2, [pc, #92]	@ (80001d8 <I2C1_setup+0x68>)
 800017a:	f043 0308 	orr.w	r3, r3, #8
 800017e:	6193      	str	r3, [r2, #24]

    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000180:	4b15      	ldr	r3, [pc, #84]	@ (80001d8 <I2C1_setup+0x68>)
 8000182:	69db      	ldr	r3, [r3, #28]
 8000184:	4a14      	ldr	r2, [pc, #80]	@ (80001d8 <I2C1_setup+0x68>)
 8000186:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800018a:	61d3      	str	r3, [r2, #28]

    GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6 | GPIO_CRL_MODE7 | GPIO_CRL_CNF7);  // Limpa os bits
 800018c:	4b13      	ldr	r3, [pc, #76]	@ (80001dc <I2C1_setup+0x6c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a12      	ldr	r2, [pc, #72]	@ (80001dc <I2C1_setup+0x6c>)
 8000192:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000196:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_CNF6_1 | GPIO_CRL_CNF6_0); // AF open-drain e 10MHz
 8000198:	4b10      	ldr	r3, [pc, #64]	@ (80001dc <I2C1_setup+0x6c>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a0f      	ldr	r2, [pc, #60]	@ (80001dc <I2C1_setup+0x6c>)
 800019e:	f043 6360 	orr.w	r3, r3, #234881024	@ 0xe000000
 80001a2:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (GPIO_CRL_MODE7_1 | GPIO_CRL_CNF7_1 | GPIO_CRL_CNF7_0); // AF open-drain e 10MHz
 80001a4:	4b0d      	ldr	r3, [pc, #52]	@ (80001dc <I2C1_setup+0x6c>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a0c      	ldr	r2, [pc, #48]	@ (80001dc <I2C1_setup+0x6c>)
 80001aa:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 80001ae:	6013      	str	r3, [r2, #0]

    // Configurar o clock I2C1 (APB1 é 36 MHz)
    I2C1->CR2 = 36;  // 36 MHz de clock periférico
 80001b0:	4b0b      	ldr	r3, [pc, #44]	@ (80001e0 <I2C1_setup+0x70>)
 80001b2:	2224      	movs	r2, #36	@ 0x24
 80001b4:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 180;
 80001b6:	4b0a      	ldr	r3, [pc, #40]	@ (80001e0 <I2C1_setup+0x70>)
 80001b8:	22b4      	movs	r2, #180	@ 0xb4
 80001ba:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 37;
 80001bc:	4b08      	ldr	r3, [pc, #32]	@ (80001e0 <I2C1_setup+0x70>)
 80001be:	2225      	movs	r2, #37	@ 0x25
 80001c0:	621a      	str	r2, [r3, #32]

    // Habilitar o I2C1
    I2C1->CR1 |= I2C_CR1_PE;
 80001c2:	4b07      	ldr	r3, [pc, #28]	@ (80001e0 <I2C1_setup+0x70>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a06      	ldr	r2, [pc, #24]	@ (80001e0 <I2C1_setup+0x70>)
 80001c8:	f043 0301 	orr.w	r3, r3, #1
 80001cc:	6013      	str	r3, [r2, #0]
}
 80001ce:	bf00      	nop
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	40021000 	.word	0x40021000
 80001dc:	40010c00 	.word	0x40010c00
 80001e0:	40005400 	.word	0x40005400

080001e4 <I2C1_start>:

void I2C1_start(void) {
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0

    I2C1->CR1 |= I2C_CR1_START;
 80001e8:	4b09      	ldr	r3, [pc, #36]	@ (8000210 <I2C1_start+0x2c>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a08      	ldr	r2, [pc, #32]	@ (8000210 <I2C1_start+0x2c>)
 80001ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80001f2:	6013      	str	r3, [r2, #0]
    //uart_write("I2C start!\n\r");


    while (!(I2C1->SR1 & I2C_SR1_SB));
 80001f4:	bf00      	nop
 80001f6:	4b06      	ldr	r3, [pc, #24]	@ (8000210 <I2C1_start+0x2c>)
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f003 0301 	and.w	r3, r3, #1
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0f9      	beq.n	80001f6 <I2C1_start+0x12>
    (void)I2C1->SR1; // Ler o registro SR1 para limpar o bit SB
 8000202:	4b03      	ldr	r3, [pc, #12]	@ (8000210 <I2C1_start+0x2c>)
 8000204:	695b      	ldr	r3, [r3, #20]

}
 8000206:	bf00      	nop
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	40005400 	.word	0x40005400

08000214 <I2C1_stop>:

void I2C1_stop(void) {
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
    // Gerar condição de stop
    I2C1->CR1 |= I2C_CR1_STOP;
 8000218:	4b04      	ldr	r3, [pc, #16]	@ (800022c <I2C1_stop+0x18>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a03      	ldr	r2, [pc, #12]	@ (800022c <I2C1_stop+0x18>)
 800021e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000222:	6013      	str	r3, [r2, #0]
    //uart_write("I2C stop!\n\r");
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	40005400 	.word	0x40005400

08000230 <I2C1_write>:

void I2C1_write(uint8_t data) {
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]

    // Escrever o dado no DR
    I2C1->DR = data;
 800023a:	4a08      	ldr	r2, [pc, #32]	@ (800025c <I2C1_write+0x2c>)
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	6113      	str	r3, [r2, #16]
    // Esperar até que o dado seja transmitido
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000240:	bf00      	nop
 8000242:	4b06      	ldr	r3, [pc, #24]	@ (800025c <I2C1_write+0x2c>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800024a:	2b00      	cmp	r3, #0
 800024c:	d0f9      	beq.n	8000242 <I2C1_write+0x12>
    //uart_write("I2C - write pong!\n\r");
    (void)I2C1->SR2;
 800024e:	4b03      	ldr	r3, [pc, #12]	@ (800025c <I2C1_write+0x2c>)
 8000250:	699b      	ldr	r3, [r3, #24]

}
 8000252:	bf00      	nop
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	40005400 	.word	0x40005400

08000260 <OLED_send_command>:
#define OLED_PAGES  (SSD1306_coluna / 8)

//oled
uint8_t atual_x , atual_y= 0;

void OLED_send_command(uint8_t command) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
    // Iniciar a comunicação I2C
    I2C1_start();
 800026a:	f7ff ffbb 	bl	80001e4 <I2C1_start>
    // Enviar o endereço do OLED e o bit de escrita
    //uart_write("I2C escrita start!\n\r");
    I2C1_write(OLED_ADDRESS << 1);
 800026e:	2078      	movs	r0, #120	@ 0x78
 8000270:	f7ff ffde 	bl	8000230 <I2C1_write>
    //uart_write("I2C escrita start ok!\n\r");
    // Enviar o byte de controle para indicar que é um comando
    //uart_write("I2C cmd start!\n\r");
    I2C1_write(0x00);
 8000274:	2000      	movs	r0, #0
 8000276:	f7ff ffdb 	bl	8000230 <I2C1_write>
    // Enviar o comando
    I2C1_write(command);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	4618      	mov	r0, r3
 800027e:	f7ff ffd7 	bl	8000230 <I2C1_write>
    // Parar a comunicação I2C
    I2C1_stop();
 8000282:	f7ff ffc7 	bl	8000214 <I2C1_stop>
}
 8000286:	bf00      	nop
 8000288:	3708      	adds	r7, #8
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}

0800028e <OLED_send_data>:

void OLED_send_data(uint8_t data) {
 800028e:	b580      	push	{r7, lr}
 8000290:	b082      	sub	sp, #8
 8000292:	af00      	add	r7, sp, #0
 8000294:	4603      	mov	r3, r0
 8000296:	71fb      	strb	r3, [r7, #7]
    // Iniciar a comunicação I2C
    I2C1_start();
 8000298:	f7ff ffa4 	bl	80001e4 <I2C1_start>
    // Enviar o endereço do OLED e o bit de escrita
    I2C1_write(OLED_ADDRESS << 1);
 800029c:	2078      	movs	r0, #120	@ 0x78
 800029e:	f7ff ffc7 	bl	8000230 <I2C1_write>
    // Enviar o byte de controle para indicar que é dado
    I2C1_write(0x40);
 80002a2:	2040      	movs	r0, #64	@ 0x40
 80002a4:	f7ff ffc4 	bl	8000230 <I2C1_write>
    // Enviar o dado
    I2C1_write(data);
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ffc0 	bl	8000230 <I2C1_write>
    // Parar a comunicação I2C
    I2C1_stop();
 80002b0:	f7ff ffb0 	bl	8000214 <I2C1_stop>
}
 80002b4:	bf00      	nop
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <OLED_init>:

void OLED_init(void) {
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
    // Sequência de inicialização para o SSD1306
    OLED_send_command(0xAE); // Display OFF
 80002c0:	20ae      	movs	r0, #174	@ 0xae
 80002c2:	f7ff ffcd 	bl	8000260 <OLED_send_command>
    OLED_send_command(0x20); // Set Memory Addressing Mode
 80002c6:	2020      	movs	r0, #32
 80002c8:	f7ff ffca 	bl	8000260 <OLED_send_command>
    OLED_send_command(0x10); // Set Page Addressing Mode
 80002cc:	2010      	movs	r0, #16
 80002ce:	f7ff ffc7 	bl	8000260 <OLED_send_command>
    OLED_send_command(0xB0); // Set Page Start Address for Page Addressing Mode
 80002d2:	20b0      	movs	r0, #176	@ 0xb0
 80002d4:	f7ff ffc4 	bl	8000260 <OLED_send_command>
    OLED_send_command(0xC8); // Set COM Output Scan Direction
 80002d8:	20c8      	movs	r0, #200	@ 0xc8
 80002da:	f7ff ffc1 	bl	8000260 <OLED_send_command>
    OLED_send_command(0x00); // Set low column address
 80002de:	2000      	movs	r0, #0
 80002e0:	f7ff ffbe 	bl	8000260 <OLED_send_command>
    OLED_send_command(0x10); // Set high column address
 80002e4:	2010      	movs	r0, #16
 80002e6:	f7ff ffbb 	bl	8000260 <OLED_send_command>
    OLED_send_command(0x40); // Set start line address
 80002ea:	2040      	movs	r0, #64	@ 0x40
 80002ec:	f7ff ffb8 	bl	8000260 <OLED_send_command>
    OLED_send_command(0x81); // Set contrast control register
 80002f0:	2081      	movs	r0, #129	@ 0x81
 80002f2:	f7ff ffb5 	bl	8000260 <OLED_send_command>
    OLED_send_command(0xFF); // Maximum contrast
 80002f6:	20ff      	movs	r0, #255	@ 0xff
 80002f8:	f7ff ffb2 	bl	8000260 <OLED_send_command>
    OLED_send_command(0xA1); // Set segment re-map 0 to 127
 80002fc:	20a1      	movs	r0, #161	@ 0xa1
 80002fe:	f7ff ffaf 	bl	8000260 <OLED_send_command>
    OLED_send_command(0xA6); // Set normal display
 8000302:	20a6      	movs	r0, #166	@ 0xa6
 8000304:	f7ff ffac 	bl	8000260 <OLED_send_command>
    OLED_send_command(0xA8); // Set multiplex ratio (1 to 64)
 8000308:	20a8      	movs	r0, #168	@ 0xa8
 800030a:	f7ff ffa9 	bl	8000260 <OLED_send_command>
    OLED_send_command(0x3F); // 1/64 duty
 800030e:	203f      	movs	r0, #63	@ 0x3f
 8000310:	f7ff ffa6 	bl	8000260 <OLED_send_command>
    OLED_send_command(0xA4); // Output RAM to display
 8000314:	20a4      	movs	r0, #164	@ 0xa4
 8000316:	f7ff ffa3 	bl	8000260 <OLED_send_command>
    OLED_send_command(0xD3); // Set display offset
 800031a:	20d3      	movs	r0, #211	@ 0xd3
 800031c:	f7ff ffa0 	bl	8000260 <OLED_send_command>
    OLED_send_command(0x00); // No offset
 8000320:	2000      	movs	r0, #0
 8000322:	f7ff ff9d 	bl	8000260 <OLED_send_command>
    OLED_send_command(0xD5); // Set display clock divide ratio/oscillator frequency
 8000326:	20d5      	movs	r0, #213	@ 0xd5
 8000328:	f7ff ff9a 	bl	8000260 <OLED_send_command>
    OLED_send_command(0xF0); // Set divide ratio
 800032c:	20f0      	movs	r0, #240	@ 0xf0
 800032e:	f7ff ff97 	bl	8000260 <OLED_send_command>
    OLED_send_command(0xD9); // Set pre-charge period
 8000332:	20d9      	movs	r0, #217	@ 0xd9
 8000334:	f7ff ff94 	bl	8000260 <OLED_send_command>
    OLED_send_command(0x22);
 8000338:	2022      	movs	r0, #34	@ 0x22
 800033a:	f7ff ff91 	bl	8000260 <OLED_send_command>
    OLED_send_command(0xDA); // Set COM pins hardware configuration
 800033e:	20da      	movs	r0, #218	@ 0xda
 8000340:	f7ff ff8e 	bl	8000260 <OLED_send_command>
    OLED_send_command(0x12);
 8000344:	2012      	movs	r0, #18
 8000346:	f7ff ff8b 	bl	8000260 <OLED_send_command>
    OLED_send_command(0xDB); // Set vcomh
 800034a:	20db      	movs	r0, #219	@ 0xdb
 800034c:	f7ff ff88 	bl	8000260 <OLED_send_command>
    OLED_send_command(0x20); // 0.77x Vcc
 8000350:	2020      	movs	r0, #32
 8000352:	f7ff ff85 	bl	8000260 <OLED_send_command>
    OLED_send_command(0x8D); // Set DC-DC enable
 8000356:	208d      	movs	r0, #141	@ 0x8d
 8000358:	f7ff ff82 	bl	8000260 <OLED_send_command>
    OLED_send_command(0x14);
 800035c:	2014      	movs	r0, #20
 800035e:	f7ff ff7f 	bl	8000260 <OLED_send_command>
    OLED_send_command(0xAF); // Display ON
 8000362:	20af      	movs	r0, #175	@ 0xaf
 8000364:	f7ff ff7c 	bl	8000260 <OLED_send_command>
    uart_write("OLED set\n\r");
 8000368:	4802      	ldr	r0, [pc, #8]	@ (8000374 <OLED_init+0xb8>)
 800036a:	f000 f9a1 	bl	80006b0 <uart_write>
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	08000d78 	.word	0x08000d78

08000378 <OLED_Fill>:

// Função para limpar o display OLED
void OLED_Fill(uint8_t val) {
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
	if(val > 0xff){
		uart_write("error, tamanho ecedido");
		return;
	}

    for (uint8_t page = 0; page < OLED_PAGES; page++) {
 8000382:	2300      	movs	r3, #0
 8000384:	73fb      	strb	r3, [r7, #15]
 8000386:	e01c      	b.n	80003c2 <OLED_Fill+0x4a>
        // Configura o OLED para escrever em cada página
    	OLED_send_command(0xB0 + page);  // Seleciona a página (0 a 7)
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	3b50      	subs	r3, #80	@ 0x50
 800038c:	b2db      	uxtb	r3, r3
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ff66 	bl	8000260 <OLED_send_command>
    	OLED_send_command(0x00);         // Coluna baixa
 8000394:	2000      	movs	r0, #0
 8000396:	f7ff ff63 	bl	8000260 <OLED_send_command>
    	OLED_send_command(0x10);         // Coluna alta
 800039a:	2010      	movs	r0, #16
 800039c:	f7ff ff60 	bl	8000260 <OLED_send_command>

        // Envia 128 bytes de zeros (0x00) para limpar uma linha inteira
        for (uint8_t col = 0; col < SSD1306_coluna; col++) {
 80003a0:	2300      	movs	r3, #0
 80003a2:	73bb      	strb	r3, [r7, #14]
 80003a4:	e006      	b.n	80003b4 <OLED_Fill+0x3c>
        	OLED_send_data(val);  // 0x00 representa uma linha de pixels "desligados"
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff70 	bl	800028e <OLED_send_data>
        for (uint8_t col = 0; col < SSD1306_coluna; col++) {
 80003ae:	7bbb      	ldrb	r3, [r7, #14]
 80003b0:	3301      	adds	r3, #1
 80003b2:	73bb      	strb	r3, [r7, #14]
 80003b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	daf4      	bge.n	80003a6 <OLED_Fill+0x2e>
    for (uint8_t page = 0; page < OLED_PAGES; page++) {
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	3301      	adds	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	2b0f      	cmp	r3, #15
 80003c6:	d9df      	bls.n	8000388 <OLED_Fill+0x10>
        }
    }
}
 80003c8:	3710      	adds	r7, #16
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <OLED_DrawChar>:

void OLED_DrawChar(uint8_t x, uint8_t y, char c) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b084      	sub	sp, #16
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
 80003da:	460b      	mov	r3, r1
 80003dc:	71bb      	strb	r3, [r7, #6]
 80003de:	4613      	mov	r3, r2
 80003e0:	717b      	strb	r3, [r7, #5]

    // Seleciona a página (linha de pixels de 8 bits de altura)
	OLED_send_command(0xB0 + (y / 8));       // Seleciona a página (Y dividido por 8)
 80003e2:	79bb      	ldrb	r3, [r7, #6]
 80003e4:	08db      	lsrs	r3, r3, #3
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	3b50      	subs	r3, #80	@ 0x50
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff37 	bl	8000260 <OLED_send_command>
	OLED_send_command(0x00 + (x & 0x0F));    // Coluna baixa
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	f003 030f 	and.w	r3, r3, #15
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff30 	bl	8000260 <OLED_send_command>
	OLED_send_command(0x10 + ((x >> 4) & 0x0F)); // Coluna alta
 8000400:	79fb      	ldrb	r3, [r7, #7]
 8000402:	091b      	lsrs	r3, r3, #4
 8000404:	b2db      	uxtb	r3, r3
 8000406:	3310      	adds	r3, #16
 8000408:	b2db      	uxtb	r3, r3
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff28 	bl	8000260 <OLED_send_command>

    for (int i = 0; i < 5; i++) {
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	e010      	b.n	8000438 <OLED_DrawChar+0x68>
    	OLED_send_data(font5x7[c - 32][i]);  // Envia os bytes da fonte
 8000416:	797b      	ldrb	r3, [r7, #5]
 8000418:	f1a3 0220 	sub.w	r2, r3, #32
 800041c:	490b      	ldr	r1, [pc, #44]	@ (800044c <OLED_DrawChar+0x7c>)
 800041e:	4613      	mov	r3, r2
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	4413      	add	r3, r2
 8000424:	18ca      	adds	r2, r1, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	4413      	add	r3, r2
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff2e 	bl	800028e <OLED_send_data>
    for (int i = 0; i < 5; i++) {
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	3301      	adds	r3, #1
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	2b04      	cmp	r3, #4
 800043c:	ddeb      	ble.n	8000416 <OLED_DrawChar+0x46>
    }
    OLED_send_data(0x00);  // Espaçamento entre caracteres
 800043e:	2000      	movs	r0, #0
 8000440:	f7ff ff25 	bl	800028e <OLED_send_data>
}
 8000444:	bf00      	nop
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	08000de8 	.word	0x08000de8

08000450 <OLED_DrawString>:

void OLED_DrawString(uint8_t x, uint8_t y, const char* str) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	603a      	str	r2, [r7, #0]
 800045a:	71fb      	strb	r3, [r7, #7]
 800045c:	460b      	mov	r3, r1
 800045e:	71bb      	strb	r3, [r7, #6]
    while (*str) {
 8000460:	e013      	b.n	800048a <OLED_DrawString+0x3a>
        OLED_DrawChar(x, y, *str++);
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	1c5a      	adds	r2, r3, #1
 8000466:	603a      	str	r2, [r7, #0]
 8000468:	781a      	ldrb	r2, [r3, #0]
 800046a:	79b9      	ldrb	r1, [r7, #6]
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ffae 	bl	80003d0 <OLED_DrawChar>
        x += 6;  // Cada caractere tem 5 pixels de largura, mais 1 pixel de espaço
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	3306      	adds	r3, #6
 8000478:	71fb      	strb	r3, [r7, #7]
        if (x + 6 >= SSD1306_coluna) {
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	2b79      	cmp	r3, #121	@ 0x79
 800047e:	d904      	bls.n	800048a <OLED_DrawString+0x3a>
            x = 0;     // Move para o início da próxima linha
 8000480:	2300      	movs	r3, #0
 8000482:	71fb      	strb	r3, [r7, #7]
            y += 8;    // Avança para a próxima página
 8000484:	79bb      	ldrb	r3, [r7, #6]
 8000486:	3308      	adds	r3, #8
 8000488:	71bb      	strb	r3, [r7, #6]
    while (*str) {
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d1e7      	bne.n	8000462 <OLED_DrawString+0x12>
        }
    }
    atual_x = x;
 8000492:	4a05      	ldr	r2, [pc, #20]	@ (80004a8 <OLED_DrawString+0x58>)
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	7013      	strb	r3, [r2, #0]
    atual_y = y;
 8000498:	4a04      	ldr	r2, [pc, #16]	@ (80004ac <OLED_DrawString+0x5c>)
 800049a:	79bb      	ldrb	r3, [r7, #6]
 800049c:	7013      	strb	r3, [r2, #0]
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	2000001c 	.word	0x2000001c
 80004ac:	2000001d 	.word	0x2000001d

080004b0 <Oled_intro>:

void Oled_intro(){
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
    OLED_Fill(0x00);
 80004b4:	2000      	movs	r0, #0
 80004b6:	f7ff ff5f 	bl	8000378 <OLED_Fill>
    TIM2_delay_ms(100);
 80004ba:	2064      	movs	r0, #100	@ 0x64
 80004bc:	f000 fb9c 	bl	8000bf8 <TIM2_delay_ms>
    OLED_Fill(0x01);
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ff59 	bl	8000378 <OLED_Fill>
    TIM2_delay_ms(100);
 80004c6:	2064      	movs	r0, #100	@ 0x64
 80004c8:	f000 fb96 	bl	8000bf8 <TIM2_delay_ms>
    OLED_Fill(0x10);
 80004cc:	2010      	movs	r0, #16
 80004ce:	f7ff ff53 	bl	8000378 <OLED_Fill>
    TIM2_delay_ms(100);
 80004d2:	2064      	movs	r0, #100	@ 0x64
 80004d4:	f000 fb90 	bl	8000bf8 <TIM2_delay_ms>
    OLED_Fill(0x00);
 80004d8:	2000      	movs	r0, #0
 80004da:	f7ff ff4d 	bl	8000378 <OLED_Fill>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <OLED_info_dht11>:

void OLED_info_dht11(uint8_t HI, uint8_t HD, uint8_t TI, uint8_t TD){
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b089      	sub	sp, #36	@ 0x24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4604      	mov	r4, r0
 80004ec:	4608      	mov	r0, r1
 80004ee:	4611      	mov	r1, r2
 80004f0:	461a      	mov	r2, r3
 80004f2:	4623      	mov	r3, r4
 80004f4:	71fb      	strb	r3, [r7, #7]
 80004f6:	4603      	mov	r3, r0
 80004f8:	71bb      	strb	r3, [r7, #6]
 80004fa:	460b      	mov	r3, r1
 80004fc:	717b      	strb	r3, [r7, #5]
 80004fe:	4613      	mov	r3, r2
 8000500:	713b      	strb	r3, [r7, #4]

	uint8_t l = 10,h = 10;
 8000502:	230a      	movs	r3, #10
 8000504:	77fb      	strb	r3, [r7, #31]
 8000506:	230a      	movs	r3, #10
 8000508:	77bb      	strb	r3, [r7, #30]
	char buffer[20];

	int_to_string(HI,buffer);
 800050a:	f107 0208 	add.w	r2, r7, #8
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	4611      	mov	r1, r2
 8000512:	4618      	mov	r0, r3
 8000514:	f000 f978 	bl	8000808 <int_to_string>
	OLED_DrawString(l,h,buffer);
 8000518:	f107 0208 	add.w	r2, r7, #8
 800051c:	7fb9      	ldrb	r1, [r7, #30]
 800051e:	7ffb      	ldrb	r3, [r7, #31]
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ff95 	bl	8000450 <OLED_DrawString>

	OLED_DrawString(atual_x,atual_y,".");
 8000526:	4b2b      	ldr	r3, [pc, #172]	@ (80005d4 <OLED_info_dht11+0xf0>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	4a2b      	ldr	r2, [pc, #172]	@ (80005d8 <OLED_info_dht11+0xf4>)
 800052c:	7811      	ldrb	r1, [r2, #0]
 800052e:	4a2b      	ldr	r2, [pc, #172]	@ (80005dc <OLED_info_dht11+0xf8>)
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ff8d 	bl	8000450 <OLED_DrawString>

	int_to_string(HD,buffer);
 8000536:	f107 0208 	add.w	r2, r7, #8
 800053a:	79bb      	ldrb	r3, [r7, #6]
 800053c:	4611      	mov	r1, r2
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f962 	bl	8000808 <int_to_string>
	OLED_DrawString(atual_x,atual_y,buffer);
 8000544:	4b23      	ldr	r3, [pc, #140]	@ (80005d4 <OLED_info_dht11+0xf0>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4a23      	ldr	r2, [pc, #140]	@ (80005d8 <OLED_info_dht11+0xf4>)
 800054a:	7811      	ldrb	r1, [r2, #0]
 800054c:	f107 0208 	add.w	r2, r7, #8
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ff7d 	bl	8000450 <OLED_DrawString>

	OLED_DrawString(atual_x,atual_y," % DE HUMIDADE");
 8000556:	4b1f      	ldr	r3, [pc, #124]	@ (80005d4 <OLED_info_dht11+0xf0>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	4a1f      	ldr	r2, [pc, #124]	@ (80005d8 <OLED_info_dht11+0xf4>)
 800055c:	7811      	ldrb	r1, [r2, #0]
 800055e:	4a20      	ldr	r2, [pc, #128]	@ (80005e0 <OLED_info_dht11+0xfc>)
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ff75 	bl	8000450 <OLED_DrawString>

	l = 10;
 8000566:	230a      	movs	r3, #10
 8000568:	77fb      	strb	r3, [r7, #31]
	h = 30;
 800056a:	231e      	movs	r3, #30
 800056c:	77bb      	strb	r3, [r7, #30]

	int_to_string(TI,buffer);
 800056e:	f107 0208 	add.w	r2, r7, #8
 8000572:	797b      	ldrb	r3, [r7, #5]
 8000574:	4611      	mov	r1, r2
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f946 	bl	8000808 <int_to_string>
	OLED_DrawString(l,h,buffer);
 800057c:	f107 0208 	add.w	r2, r7, #8
 8000580:	7fb9      	ldrb	r1, [r7, #30]
 8000582:	7ffb      	ldrb	r3, [r7, #31]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff63 	bl	8000450 <OLED_DrawString>

	OLED_DrawString(atual_x,atual_y,".");
 800058a:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <OLED_info_dht11+0xf0>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	4a12      	ldr	r2, [pc, #72]	@ (80005d8 <OLED_info_dht11+0xf4>)
 8000590:	7811      	ldrb	r1, [r2, #0]
 8000592:	4a12      	ldr	r2, [pc, #72]	@ (80005dc <OLED_info_dht11+0xf8>)
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ff5b 	bl	8000450 <OLED_DrawString>

	int_to_string(TD,buffer);
 800059a:	f107 0208 	add.w	r2, r7, #8
 800059e:	793b      	ldrb	r3, [r7, #4]
 80005a0:	4611      	mov	r1, r2
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f930 	bl	8000808 <int_to_string>
	OLED_DrawString(atual_x,atual_y,buffer);
 80005a8:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <OLED_info_dht11+0xf0>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4a0a      	ldr	r2, [pc, #40]	@ (80005d8 <OLED_info_dht11+0xf4>)
 80005ae:	7811      	ldrb	r1, [r2, #0]
 80005b0:	f107 0208 	add.w	r2, r7, #8
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ff4b 	bl	8000450 <OLED_DrawString>

	OLED_DrawString(atual_x,atual_y," C ");
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <OLED_info_dht11+0xf0>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	4a06      	ldr	r2, [pc, #24]	@ (80005d8 <OLED_info_dht11+0xf4>)
 80005c0:	7811      	ldrb	r1, [r2, #0]
 80005c2:	4a08      	ldr	r2, [pc, #32]	@ (80005e4 <OLED_info_dht11+0x100>)
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ff43 	bl	8000450 <OLED_DrawString>


}
 80005ca:	bf00      	nop
 80005cc:	3724      	adds	r7, #36	@ 0x24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd90      	pop	{r4, r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000001c 	.word	0x2000001c
 80005d8:	2000001d 	.word	0x2000001d
 80005dc:	08000d84 	.word	0x08000d84
 80005e0:	08000d88 	.word	0x08000d88
 80005e4:	08000d98 	.word	0x08000d98

080005e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db0b      	blt.n	8000612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	f003 021f 	and.w	r2, r3, #31
 8000600:	4906      	ldr	r1, [pc, #24]	@ (800061c <__NVIC_EnableIRQ+0x34>)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	095b      	lsrs	r3, r3, #5
 8000608:	2001      	movs	r0, #1
 800060a:	fa00 f202 	lsl.w	r2, r0, r2
 800060e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	e000e100 	.word	0xe000e100

08000620 <USART1_setup>:
char ch = '\000';
char buffer[20];
uint8_t  buffer_index = 0;


void USART1_setup(){
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

	/*UART1 Pin configuration*/
	//enable clock access to GPIOA
	RCC->APB2ENR|=RCC_APB2ENR_IOPAEN;
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <USART1_setup+0x84>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a1e      	ldr	r2, [pc, #120]	@ (80006a4 <USART1_setup+0x84>)
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	6193      	str	r3, [r2, #24]

	/*Configure PA9(TX) as output maximum speed to 50MHz
	 * and alternate output push-pull mode for USART1*/
	GPIOA->CRH &= 0xFFFFFF0F;
 8000630:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <USART1_setup+0x88>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	4a1c      	ldr	r2, [pc, #112]	@ (80006a8 <USART1_setup+0x88>)
 8000636:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800063a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000B0;
 800063c:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <USART1_setup+0x88>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	4a19      	ldr	r2, [pc, #100]	@ (80006a8 <USART1_setup+0x88>)
 8000642:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000646:	6053      	str	r3, [r2, #4]

	//Configure PA10(RX) as as input floating as following
	GPIOA->CRH &= 0xFFFFF0FF;
 8000648:	4b17      	ldr	r3, [pc, #92]	@ (80006a8 <USART1_setup+0x88>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	4a16      	ldr	r2, [pc, #88]	@ (80006a8 <USART1_setup+0x88>)
 800064e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000652:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x00000400;
 8000654:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <USART1_setup+0x88>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	4a13      	ldr	r2, [pc, #76]	@ (80006a8 <USART1_setup+0x88>)
 800065a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800065e:	6053      	str	r3, [r2, #4]

	/*USART1 configuration*/

	//enable clock access to USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <USART1_setup+0x84>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a0f      	ldr	r2, [pc, #60]	@ (80006a4 <USART1_setup+0x84>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066a:	6193      	str	r3, [r2, #24]
	//Enable receiver
	USART1->CR1 |= USART_CR1_RE | USART_CR1_TE;
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <USART1_setup+0x8c>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a0e      	ldr	r2, [pc, #56]	@ (80006ac <USART1_setup+0x8c>)
 8000672:	f043 030c 	orr.w	r3, r3, #12
 8000676:	60d3      	str	r3, [r2, #12]
	//Set Baud Rate
	USART1->BRR = ((CPU_CLK_72m + (BaudRate/2U))/BaudRate);
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <USART1_setup+0x8c>)
 800067a:	f240 2271 	movw	r2, #625	@ 0x271
 800067e:	609a      	str	r2, [r3, #8]
	//Enable RXNIE interrupt
	USART1->CR1|=USART_CR1_RXNEIE;
 8000680:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <USART1_setup+0x8c>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	4a09      	ldr	r2, [pc, #36]	@ (80006ac <USART1_setup+0x8c>)
 8000686:	f043 0320 	orr.w	r3, r3, #32
 800068a:	60d3      	str	r3, [r2, #12]
	//Enable USART1 interrupt in NVIC
	NVIC_EnableIRQ(USART1_IRQn);
 800068c:	2025      	movs	r0, #37	@ 0x25
 800068e:	f7ff ffab 	bl	80005e8 <__NVIC_EnableIRQ>
	//Enable UART
	USART1->CR1 |= USART_CR1_UE;
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <USART1_setup+0x8c>)
 8000694:	68db      	ldr	r3, [r3, #12]
 8000696:	4a05      	ldr	r2, [pc, #20]	@ (80006ac <USART1_setup+0x8c>)
 8000698:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800069c:	60d3      	str	r3, [r2, #12]
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010800 	.word	0x40010800
 80006ac:	40013800 	.word	0x40013800

080006b0 <uart_write>:

void uart_write(char *ch)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	while(*ch)
 80006b8:	e00d      	b.n	80006d6 <uart_write+0x26>
	{
		//Make sure the transmit data register is empty
		while(!(USART1->SR & USART_SR_TXE)){}
 80006ba:	bf00      	nop
 80006bc:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <uart_write+0x3c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0f9      	beq.n	80006bc <uart_write+0xc>
		//Write to transmit data register
		USART1->DR	=  (*ch & 0xFF);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <uart_write+0x3c>)
 80006ce:	605a      	str	r2, [r3, #4]
		ch++;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3301      	adds	r3, #1
 80006d4:	607b      	str	r3, [r7, #4]
	while(*ch)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d1ed      	bne.n	80006ba <uart_write+0xa>
	}
}
 80006de:	bf00      	nop
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40013800 	.word	0x40013800

080006f0 <uart_info_dht11>:

void uart_info_dht11(uint8_t HI, uint8_t HD, uint8_t TI, uint8_t TD){
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4604      	mov	r4, r0
 80006f8:	4608      	mov	r0, r1
 80006fa:	4611      	mov	r1, r2
 80006fc:	461a      	mov	r2, r3
 80006fe:	4623      	mov	r3, r4
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	4603      	mov	r3, r0
 8000704:	71bb      	strb	r3, [r7, #6]
 8000706:	460b      	mov	r3, r1
 8000708:	717b      	strb	r3, [r7, #5]
 800070a:	4613      	mov	r3, r2
 800070c:	713b      	strb	r3, [r7, #4]

    int_to_string(TI,buffer);
 800070e:	797b      	ldrb	r3, [r7, #5]
 8000710:	4917      	ldr	r1, [pc, #92]	@ (8000770 <uart_info_dht11+0x80>)
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f878 	bl	8000808 <int_to_string>
    uart_write(buffer);
 8000718:	4815      	ldr	r0, [pc, #84]	@ (8000770 <uart_info_dht11+0x80>)
 800071a:	f7ff ffc9 	bl	80006b0 <uart_write>
    uart_write(",");
 800071e:	4815      	ldr	r0, [pc, #84]	@ (8000774 <uart_info_dht11+0x84>)
 8000720:	f7ff ffc6 	bl	80006b0 <uart_write>
    int_to_string(TD,buffer);
 8000724:	793b      	ldrb	r3, [r7, #4]
 8000726:	4912      	ldr	r1, [pc, #72]	@ (8000770 <uart_info_dht11+0x80>)
 8000728:	4618      	mov	r0, r3
 800072a:	f000 f86d 	bl	8000808 <int_to_string>
    uart_write(buffer);
 800072e:	4810      	ldr	r0, [pc, #64]	@ (8000770 <uart_info_dht11+0x80>)
 8000730:	f7ff ffbe 	bl	80006b0 <uart_write>
    uart_write(" C e ");
 8000734:	4810      	ldr	r0, [pc, #64]	@ (8000778 <uart_info_dht11+0x88>)
 8000736:	f7ff ffbb 	bl	80006b0 <uart_write>

    int_to_string(HI,buffer);
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	490c      	ldr	r1, [pc, #48]	@ (8000770 <uart_info_dht11+0x80>)
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f862 	bl	8000808 <int_to_string>
    uart_write(buffer);
 8000744:	480a      	ldr	r0, [pc, #40]	@ (8000770 <uart_info_dht11+0x80>)
 8000746:	f7ff ffb3 	bl	80006b0 <uart_write>
    uart_write(",");
 800074a:	480a      	ldr	r0, [pc, #40]	@ (8000774 <uart_info_dht11+0x84>)
 800074c:	f7ff ffb0 	bl	80006b0 <uart_write>
    int_to_string(HD,buffer);
 8000750:	79bb      	ldrb	r3, [r7, #6]
 8000752:	4907      	ldr	r1, [pc, #28]	@ (8000770 <uart_info_dht11+0x80>)
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f857 	bl	8000808 <int_to_string>
    uart_write(buffer);
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <uart_info_dht11+0x80>)
 800075c:	f7ff ffa8 	bl	80006b0 <uart_write>
    uart_write(" %\r");
 8000760:	4806      	ldr	r0, [pc, #24]	@ (800077c <uart_info_dht11+0x8c>)
 8000762:	f7ff ffa5 	bl	80006b0 <uart_write>

}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bd90      	pop	{r4, r7, pc}
 800076e:	bf00      	nop
 8000770:	20000020 	.word	0x20000020
 8000774:	08000d9c 	.word	0x08000d9c
 8000778:	08000da0 	.word	0x08000da0
 800077c:	08000da8 	.word	0x08000da8

08000780 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
    /* Verifica a origem da interrupção */
    if (USART1->SR & USART_SR_RXNE) /* Recebeu um caractere */
 8000784:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <USART1_IRQHandler+0x78>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f003 0320 	and.w	r3, r3, #32
 800078c:	2b00      	cmp	r3, #0
 800078e:	d031      	beq.n	80007f4 <USART1_IRQHandler+0x74>
    {
        /* Lê o dado */
        ch = USART1->DR;
 8000790:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <USART1_IRQHandler+0x78>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <USART1_IRQHandler+0x7c>)
 8000798:	701a      	strb	r2, [r3, #0]
        uart_write(&ch);
 800079a:	4818      	ldr	r0, [pc, #96]	@ (80007fc <USART1_IRQHandler+0x7c>)
 800079c:	f7ff ff88 	bl	80006b0 <uart_write>
        // Armazena o caractere no buffer
        if (buffer_index < sizeof(buffer) - 1)  // Certifica-se de não ultrapassar o tamanho do buffer
 80007a0:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <USART1_IRQHandler+0x80>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b12      	cmp	r3, #18
 80007a6:	d822      	bhi.n	80007ee <USART1_IRQHandler+0x6e>
        {
            buffer[buffer_index++] = ch;
 80007a8:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <USART1_IRQHandler+0x80>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	b2d1      	uxtb	r1, r2
 80007b0:	4a13      	ldr	r2, [pc, #76]	@ (8000800 <USART1_IRQHandler+0x80>)
 80007b2:	7011      	strb	r1, [r2, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <USART1_IRQHandler+0x7c>)
 80007b8:	7819      	ldrb	r1, [r3, #0]
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <USART1_IRQHandler+0x84>)
 80007bc:	5499      	strb	r1, [r3, r2]

            // Verifica se o caractere recebido é o fim da string (ex: '\n' ou '\r')
            if (ch == '\n' || ch == '\r')
 80007be:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <USART1_IRQHandler+0x7c>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b0a      	cmp	r3, #10
 80007c4:	d003      	beq.n	80007ce <USART1_IRQHandler+0x4e>
 80007c6:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <USART1_IRQHandler+0x7c>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b0d      	cmp	r3, #13
 80007cc:	d112      	bne.n	80007f4 <USART1_IRQHandler+0x74>
            {
                buffer[buffer_index - 1] = '\0';  // Substitui o terminador por NULL para formar a string
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <USART1_IRQHandler+0x80>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000804 <USART1_IRQHandler+0x84>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	54d1      	strb	r1, [r2, r3]

                ch = '\n';
 80007da:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <USART1_IRQHandler+0x7c>)
 80007dc:	220a      	movs	r2, #10
 80007de:	701a      	strb	r2, [r3, #0]
                uart_write(&ch);
 80007e0:	4806      	ldr	r0, [pc, #24]	@ (80007fc <USART1_IRQHandler+0x7c>)
 80007e2:	f7ff ff65 	bl	80006b0 <uart_write>


                buffer_index = 0;  // Reseta o índice para a próxima string
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <USART1_IRQHandler+0x80>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
            // Buffer cheio, reiniciar para evitar estouro
            buffer_index = 0;
        }

    }
}
 80007ec:	e002      	b.n	80007f4 <USART1_IRQHandler+0x74>
            buffer_index = 0;
 80007ee:	4b04      	ldr	r3, [pc, #16]	@ (8000800 <USART1_IRQHandler+0x80>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40013800 	.word	0x40013800
 80007fc:	2000001e 	.word	0x2000001e
 8000800:	20000034 	.word	0x20000034
 8000804:	20000020 	.word	0x20000020

08000808 <int_to_string>:

void int_to_string(uint8_t value, char *str) {
 8000808:	b480      	push	{r7}
 800080a:	b087      	sub	sp, #28
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
    int i = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]

    // Processa cada dígito e coloca no array
    do {
        str[i++] = (value % 10) + '0';  // Extrai o último dígito e converte para char
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <int_to_string+0xac>)
 800081c:	fba3 1302 	umull	r1, r3, r3, r2
 8000820:	08d9      	lsrs	r1, r3, #3
 8000822:	460b      	mov	r3, r1
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	440b      	add	r3, r1
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	b2da      	uxtb	r2, r3
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	1c59      	adds	r1, r3, #1
 8000832:	6179      	str	r1, [r7, #20]
 8000834:	4619      	mov	r1, r3
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	440b      	add	r3, r1
 800083a:	3230      	adds	r2, #48	@ 0x30
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	701a      	strb	r2, [r3, #0]
        value /= 10;                    // Remove o dígito processado
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4a1c      	ldr	r2, [pc, #112]	@ (80008b4 <int_to_string+0xac>)
 8000844:	fba2 2303 	umull	r2, r3, r2, r3
 8000848:	08db      	lsrs	r3, r3, #3
 800084a:	71fb      	strb	r3, [r7, #7]
    } while (value > 0);
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1e2      	bne.n	8000818 <int_to_string+0x10>

    // Adiciona o terminador nulo
    str[i] = '\0';
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	683a      	ldr	r2, [r7, #0]
 8000856:	4413      	add	r3, r2
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]

    // Inverte a string, já que os dígitos foram colocados em ordem inversa
    for (int j = 0; j < i / 2; j++) {
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	e01a      	b.n	8000898 <int_to_string+0x90>
        char temp = str[j];
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	683a      	ldr	r2, [r7, #0]
 8000866:	4413      	add	r3, r2
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	73fb      	strb	r3, [r7, #15]
        str[j] = str[i - j - 1];
 800086c:	697a      	ldr	r2, [r7, #20]
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	3b01      	subs	r3, #1
 8000874:	683a      	ldr	r2, [r7, #0]
 8000876:	441a      	add	r2, r3
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	6839      	ldr	r1, [r7, #0]
 800087c:	440b      	add	r3, r1
 800087e:	7812      	ldrb	r2, [r2, #0]
 8000880:	701a      	strb	r2, [r3, #0]
        str[i - j - 1] = temp;
 8000882:	697a      	ldr	r2, [r7, #20]
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	3b01      	subs	r3, #1
 800088a:	683a      	ldr	r2, [r7, #0]
 800088c:	4413      	add	r3, r2
 800088e:	7bfa      	ldrb	r2, [r7, #15]
 8000890:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < i / 2; j++) {
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	3301      	adds	r3, #1
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	0fda      	lsrs	r2, r3, #31
 800089c:	4413      	add	r3, r2
 800089e:	105b      	asrs	r3, r3, #1
 80008a0:	461a      	mov	r2, r3
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	4293      	cmp	r3, r2
 80008a6:	dbdc      	blt.n	8000862 <int_to_string+0x5a>
    }
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	371c      	adds	r7, #28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	cccccccd 	.word	0xcccccccd

080008b8 <dht11_setup>:

//dht11
#define DHT11_PIN 	0x200
#define DHT11_GRUPO GPIOB

void dht11_setup(){
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80008bc:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <dht11_setup+0x3c>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a0c      	ldr	r2, [pc, #48]	@ (80008f4 <dht11_setup+0x3c>)
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	6193      	str	r3, [r2, #24]

	DHT11_GRUPO->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 80008c8:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <dht11_setup+0x40>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <dht11_setup+0x40>)
 80008ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80008d2:	6053      	str	r3, [r2, #4]
	DHT11_GRUPO->CRH |= GPIO_CRH_MODE9_1;
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <dht11_setup+0x40>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	4a07      	ldr	r2, [pc, #28]	@ (80008f8 <dht11_setup+0x40>)
 80008da:	f043 0320 	orr.w	r3, r3, #32
 80008de:	6053      	str	r3, [r2, #4]

    DHT11_GRUPO->ODR &= ~DHT11_PIN;  // Pino em LOW
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <dht11_setup+0x40>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	4a04      	ldr	r2, [pc, #16]	@ (80008f8 <dht11_setup+0x40>)
 80008e6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80008ea:	60d3      	str	r3, [r2, #12]

}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010c00 	.word	0x40010c00

080008fc <dht11_start>:

void dht11_start(){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0

	dht11_setup();
 8000900:	f7ff ffda 	bl	80008b8 <dht11_setup>

	DHT11_GRUPO->ODR &= ~DHT11_PIN;
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <dht11_start+0x30>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	4a08      	ldr	r2, [pc, #32]	@ (800092c <dht11_start+0x30>)
 800090a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800090e:	60d3      	str	r3, [r2, #12]
	TIM2_delay_ms(18);
 8000910:	2012      	movs	r0, #18
 8000912:	f000 f971 	bl	8000bf8 <TIM2_delay_ms>

	DHT11_GRUPO->ODR |= DHT11_PIN;
 8000916:	4b05      	ldr	r3, [pc, #20]	@ (800092c <dht11_start+0x30>)
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	4a04      	ldr	r2, [pc, #16]	@ (800092c <dht11_start+0x30>)
 800091c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000920:	60d3      	str	r3, [r2, #12]
	TIM2_delay_us(30);
 8000922:	201e      	movs	r0, #30
 8000924:	f000 f97c 	bl	8000c20 <TIM2_delay_us>

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40010c00 	.word	0x40010c00

08000930 <dht11_ping>:

uint8_t dht11_ping() {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

	dht11_start();
 8000936:	f7ff ffe1 	bl	80008fc <dht11_start>


    uint8_t sinal = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	71fb      	strb	r3, [r7, #7]

    DHT11_GRUPO->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 800093e:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <dht11_ping+0x68>)
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	4a15      	ldr	r2, [pc, #84]	@ (8000998 <dht11_ping+0x68>)
 8000944:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000948:	6053      	str	r3, [r2, #4]
    DHT11_GRUPO->CRH |= GPIO_CRH_CNF9_0; //float input
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <dht11_ping+0x68>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	4a12      	ldr	r2, [pc, #72]	@ (8000998 <dht11_ping+0x68>)
 8000950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000954:	6053      	str	r3, [r2, #4]

    // Esperar o DHT11 puxar o pino para baixo
    TIM2_delay_us(40);
 8000956:	2028      	movs	r0, #40	@ 0x28
 8000958:	f000 f962 	bl	8000c20 <TIM2_delay_us>

    if (!(DHT11_GRUPO->IDR & DHT11_PIN)){
 800095c:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <dht11_ping+0x68>)
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10a      	bne.n	800097e <dht11_ping+0x4e>
    	//uart_write("pong!\n\r");
    	TIM2_delay_us(80);
 8000968:	2050      	movs	r0, #80	@ 0x50
 800096a:	f000 f959 	bl	8000c20 <TIM2_delay_us>
        if (DHT11_GRUPO->IDR & DHT11_PIN) {
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <dht11_ping+0x68>)
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <dht11_ping+0x4e>
            sinal = 1; // DHT11 respondeu
 800097a:	2301      	movs	r3, #1
 800097c:	71fb      	strb	r3, [r7, #7]
            //uart_write("pong!\n\r");
        }
    }

    // Esperar o fim da resposta
    while (DHT11_GRUPO->IDR & DHT11_PIN);
 800097e:	bf00      	nop
 8000980:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <dht11_ping+0x68>)
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1f9      	bne.n	8000980 <dht11_ping+0x50>
    //uart_write("\n\r ping encerrado\n\r");
    return sinal;
 800098c:	79fb      	ldrb	r3, [r7, #7]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40010c00 	.word	0x40010c00

0800099c <dht11_read>:




uint8_t dht11_read(){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
	uint8_t i, result = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	71bb      	strb	r3, [r7, #6]

    for (i = 0; i < 8; i++) {
 80009a6:	2300      	movs	r3, #0
 80009a8:	71fb      	strb	r3, [r7, #7]
 80009aa:	e025      	b.n	80009f8 <dht11_read+0x5c>

        // Esperar o pino ficar baixo
        while (!(DHT11_GRUPO->IDR & DHT11_PIN));
 80009ac:	bf00      	nop
 80009ae:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <dht11_read+0x6c>)
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f9      	beq.n	80009ae <dht11_read+0x12>

        // Esperar 40 us e verificar o estado do pino
        TIM2_delay_us(40);
 80009ba:	2028      	movs	r0, #40	@ 0x28
 80009bc:	f000 f930 	bl	8000c20 <TIM2_delay_us>
        if (DHT11_GRUPO->IDR & DHT11_PIN) {
 80009c0:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <dht11_read+0x6c>)
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d00b      	beq.n	80009e4 <dht11_read+0x48>
            result |= (1 << (7 - i)); // Se o pino estiver alto, é 1
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f1c3 0307 	rsb	r3, r3, #7
 80009d2:	2201      	movs	r2, #1
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	b25a      	sxtb	r2, r3
 80009da:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009de:	4313      	orrs	r3, r2
 80009e0:	b25b      	sxtb	r3, r3
 80009e2:	71bb      	strb	r3, [r7, #6]
        }

        // Esperar o pino ficar baixo de novo
        while (DHT11_GRUPO->IDR & DHT11_PIN);
 80009e4:	bf00      	nop
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <dht11_read+0x6c>)
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d1f9      	bne.n	80009e6 <dht11_read+0x4a>
    for (i = 0; i < 8; i++) {
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	3301      	adds	r3, #1
 80009f6:	71fb      	strb	r3, [r7, #7]
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	2b07      	cmp	r3, #7
 80009fc:	d9d6      	bls.n	80009ac <dht11_read+0x10>
    }

    return result;
 80009fe:	79bb      	ldrb	r3, [r7, #6]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40010c00 	.word	0x40010c00

08000a0c <main>:
#include <I2C.h>

#include "Oled.h"

int main(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

	uint8_t HumidadeI = 0, HumidadeD = 0, TemperaturaI = 0, TemperaturaD = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	2300      	movs	r3, #0
 8000a18:	71bb      	strb	r3, [r7, #6]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	717b      	strb	r3, [r7, #5]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	713b      	strb	r3, [r7, #4]

	RCC_setup();
 8000a22:	f000 f86b 	bl	8000afc <RCC_setup>

	USART1_setup();
 8000a26:	f7ff fdfb 	bl	8000620 <USART1_setup>
	uart_write("usart set\n\r");
 8000a2a:	4821      	ldr	r0, [pc, #132]	@ (8000ab0 <main+0xa4>)
 8000a2c:	f7ff fe40 	bl	80006b0 <uart_write>

	TIM2_setup();
 8000a30:	f000 f8c2 	bl	8000bb8 <TIM2_setup>
	uart_write("tim2 set\n\r");
 8000a34:	481f      	ldr	r0, [pc, #124]	@ (8000ab4 <main+0xa8>)
 8000a36:	f7ff fe3b 	bl	80006b0 <uart_write>

	dht11_setup();
 8000a3a:	f7ff ff3d 	bl	80008b8 <dht11_setup>
	uart_write("dht11 set\n\r");
 8000a3e:	481e      	ldr	r0, [pc, #120]	@ (8000ab8 <main+0xac>)
 8000a40:	f7ff fe36 	bl	80006b0 <uart_write>

    I2C1_setup();
 8000a44:	f7ff fb94 	bl	8000170 <I2C1_setup>
    uart_write("I2C set\n\r");
 8000a48:	481c      	ldr	r0, [pc, #112]	@ (8000abc <main+0xb0>)
 8000a4a:	f7ff fe31 	bl	80006b0 <uart_write>

    OLED_init();
 8000a4e:	f7ff fc35 	bl	80002bc <OLED_init>
    uart_write("I2C init\n\r");
 8000a52:	481b      	ldr	r0, [pc, #108]	@ (8000ac0 <main+0xb4>)
 8000a54:	f7ff fe2c 	bl	80006b0 <uart_write>

    OLED_send_command(0xAF); // Comando para ligar o OLED (Display ON)
 8000a58:	20af      	movs	r0, #175	@ 0xaf
 8000a5a:	f7ff fc01 	bl	8000260 <OLED_send_command>

    Oled_intro();
 8000a5e:	f7ff fd27 	bl	80004b0 <Oled_intro>


	while(1)
	{
		TIM2_delay_ms(1000);
 8000a62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a66:	f000 f8c7 	bl	8000bf8 <TIM2_delay_ms>
		//GPIOC->ODR ^= (1 << 13);
		if(dht11_ping()){
 8000a6a:	f7ff ff61 	bl	8000930 <dht11_ping>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0f6      	beq.n	8000a62 <main+0x56>


			TemperaturaI = dht11_read();
 8000a74:	f7ff ff92 	bl	800099c <dht11_read>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	717b      	strb	r3, [r7, #5]
			TemperaturaD = dht11_read();
 8000a7c:	f7ff ff8e 	bl	800099c <dht11_read>
 8000a80:	4603      	mov	r3, r0
 8000a82:	713b      	strb	r3, [r7, #4]

			HumidadeI = dht11_read();
 8000a84:	f7ff ff8a 	bl	800099c <dht11_read>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	71fb      	strb	r3, [r7, #7]
			HumidadeD = dht11_read();
 8000a8c:	f7ff ff86 	bl	800099c <dht11_read>
 8000a90:	4603      	mov	r3, r0
 8000a92:	71bb      	strb	r3, [r7, #6]

			uart_info_dht11(TemperaturaI,TemperaturaD,HumidadeI,HumidadeD);
 8000a94:	79bb      	ldrb	r3, [r7, #6]
 8000a96:	79fa      	ldrb	r2, [r7, #7]
 8000a98:	7939      	ldrb	r1, [r7, #4]
 8000a9a:	7978      	ldrb	r0, [r7, #5]
 8000a9c:	f7ff fe28 	bl	80006f0 <uart_info_dht11>

			OLED_info_dht11(TemperaturaI,TemperaturaD,HumidadeI,HumidadeD);
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	79fa      	ldrb	r2, [r7, #7]
 8000aa4:	7939      	ldrb	r1, [r7, #4]
 8000aa6:	7978      	ldrb	r0, [r7, #5]
 8000aa8:	f7ff fd1c 	bl	80004e4 <OLED_info_dht11>
		TIM2_delay_ms(1000);
 8000aac:	e7d9      	b.n	8000a62 <main+0x56>
 8000aae:	bf00      	nop
 8000ab0:	08000dac 	.word	0x08000dac
 8000ab4:	08000db8 	.word	0x08000db8
 8000ab8:	08000dc4 	.word	0x08000dc4
 8000abc:	08000dd0 	.word	0x08000dd0
 8000ac0:	08000ddc 	.word	0x08000ddc

08000ac4 <__NVIC_EnableIRQ>:
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	db0b      	blt.n	8000aee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	f003 021f 	and.w	r2, r3, #31
 8000adc:	4906      	ldr	r1, [pc, #24]	@ (8000af8 <__NVIC_EnableIRQ+0x34>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	095b      	lsrs	r3, r3, #5
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	e000e100 	.word	0xe000e100

08000afc <RCC_setup>:

//timer
uint8_t flag = 0;

void RCC_setup(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
    // Habilitar o HSE (High-Speed External Clock)
    RCC->CR |= RCC_CR_HSEON;  // Liga o HSE
 8000b00:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a2a      	ldr	r2, [pc, #168]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b0a:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));  // Aguarda até que o HSE esteja pronto
 8000b0c:	bf00      	nop
 8000b0e:	4b28      	ldr	r3, [pc, #160]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d0f9      	beq.n	8000b0e <RCC_setup+0x12>

    // Configurar o PLL para usar o HSE como fonte e multiplicar por 9
    RCC->CFGR &= ~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL); // Limpar as configurações de PLL
 8000b1a:	4b25      	ldr	r3, [pc, #148]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	4a24      	ldr	r2, [pc, #144]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b20:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8000b24:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= ( (1 << 16) | RCC_CFGR_PLLMULL9); // Configurar PLL com HSE e multiplicação por 9
 8000b26:	4b22      	ldr	r3, [pc, #136]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	4a21      	ldr	r2, [pc, #132]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b2c:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 8000b30:	6053      	str	r3, [r2, #4]

    // Ligar o PLL
    RCC->CR |= RCC_CR_PLLON;  // Habilitar o PLL
 8000b32:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a1e      	ldr	r2, [pc, #120]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b3c:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));  // Esperar o PLL ficar pronto
 8000b3e:	bf00      	nop
 8000b40:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d0f9      	beq.n	8000b40 <RCC_setup+0x44>

    // Configurar os divisores AHB, APB1 e APB2
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;   // Sem divisão para o AHB (HCLK = SYSCLK)
 8000b4c:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b4e:	4a18      	ldr	r2, [pc, #96]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;  // Divisor 2 para APB1 (PCLK1 = HCLK/2)
 8000b54:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	4a15      	ldr	r2, [pc, #84]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b5e:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;  // Sem divisão para APB2 (PCLK2 = HCLK)
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b62:	4a13      	ldr	r2, [pc, #76]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	6053      	str	r3, [r2, #4]

    // Configurar o Flash latency
    FLASH->ACR |= FLASH_ACR_LATENCY_2;  // 2 ciclos de espera para 72 MHz
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <RCC_setup+0xb8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a11      	ldr	r2, [pc, #68]	@ (8000bb4 <RCC_setup+0xb8>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6013      	str	r3, [r2, #0]

    // Selecionar o PLL como a fonte do SYSCLK
    RCC->CFGR &= ~RCC_CFGR_SW;  // Limpar bits de seleção do SYSCLK
 8000b74:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b7a:	f023 0303 	bic.w	r3, r3, #3
 8000b7e:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_PLL;  // Selecionar o PLL como a fonte de clock
 8000b80:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	6053      	str	r3, [r2, #4]

    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);  // Esperar a transição para PLL
 8000b8c:	bf00      	nop
 8000b8e:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f003 030c 	and.w	r3, r3, #12
 8000b96:	2b08      	cmp	r3, #8
 8000b98:	d1f9      	bne.n	8000b8e <RCC_setup+0x92>

    // Desabilitar o HSI (opcional, se não for mais usado)
    RCC->CR &= ~RCC_CR_HSION;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <RCC_setup+0xb4>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <RCC_setup+0xb4>)
 8000ba0:	f023 0301 	bic.w	r3, r3, #1
 8000ba4:	6013      	str	r3, [r2, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40022000 	.word	0x40022000

08000bb8 <TIM2_setup>:



void TIM2_setup(){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0

	// Enable clock access to timer2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <TIM2_setup+0x3c>)
 8000bbe:	69db      	ldr	r3, [r3, #28]
 8000bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf4 <TIM2_setup+0x3c>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	61d3      	str	r3, [r2, #28]

	// Configure timer2
	TIM2->PSC = tim2_psc - 1; 	//8000000/8 =100000 i.e. 1us
 8000bc8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000bcc:	2247      	movs	r2, #71	@ 0x47
 8000bce:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 1 - 1 ;
 8000bd0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	62da      	str	r2, [r3, #44]	@ 0x2c


	/* Set UIE(Update interrupt enable) bit
	 * in TIMx DMA/Interrupt enable register (TIMx_DIER)
	 * to enable timer interrupt*/
	TIM2->DIER |= TIM_DIER_UIE;
 8000bd8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	60d3      	str	r3, [r2, #12]

	// Enable timer2 interrupt in NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 8000be8:	201c      	movs	r0, #28
 8000bea:	f7ff ff6b 	bl	8000ac4 <__NVIC_EnableIRQ>


}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <TIM2_delay_ms>:

void TIM2_delay_ms(uint32_t ms){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

	while(ms--){
 8000c00:	e003      	b.n	8000c0a <TIM2_delay_ms+0x12>
		TIM2_delay_us(1000);
 8000c02:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c06:	f000 f80b 	bl	8000c20 <TIM2_delay_us>
	while(ms--){
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	1e5a      	subs	r2, r3, #1
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d1f6      	bne.n	8000c02 <TIM2_delay_ms+0xa>

	};

}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <TIM2_delay_us>:

void TIM2_delay_us(uint32_t us){
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

	// Disable the timer
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000c28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c32:	f023 0301 	bic.w	r3, r3, #1
 8000c36:	6013      	str	r3, [r2, #0]

	TIM2->ARR = us -1;
 8000c38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// Enable the timer
	TIM2->CR1 |= TIM_CR1_CEN;
 8000c42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6013      	str	r3, [r2, #0]

	while(!flag);
 8000c52:	bf00      	nop
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <TIM2_delay_us+0x4c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0fb      	beq.n	8000c54 <TIM2_delay_us+0x34>
	flag = 0;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <TIM2_delay_us+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]

}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	20000035 	.word	0x20000035

08000c70 <TIM2_IRQHandler>:
}
/*
 * TIM2interrupt handler
 */
void TIM2_IRQHandler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	if(TIM2->SR & TIM_SR_UIF)
 8000c74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d018      	beq.n	8000cb4 <TIM2_IRQHandler+0x44>
	{
		TIM2->SR &=~TIM_SR_UIF;
 8000c82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c8c:	f023 0301 	bic.w	r3, r3, #1
 8000c90:	6113      	str	r3, [r2, #16]
		flag = 1;
 8000c92:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <TIM2_IRQHandler+0x4c>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR ^= (1 << 11);
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <TIM2_IRQHandler+0x50>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	4a08      	ldr	r2, [pc, #32]	@ (8000cc0 <TIM2_IRQHandler+0x50>)
 8000c9e:	f483 6300 	eor.w	r3, r3, #2048	@ 0x800
 8000ca2:	60d3      	str	r3, [r2, #12]

		TIM2->CR1 &= ~TIM_CR1_CEN;
 8000ca4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cae:	f023 0301 	bic.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]

	}

}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	20000035 	.word	0x20000035
 8000cc0:	40010c00 	.word	0x40010c00

08000cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc4:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	@ (8000d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <LoopForever+0xe>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d10 <LoopForever+0x16>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cf2:	f000 f811 	bl	8000d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf6:	f7ff fe89 	bl	8000a0c <main>

08000cfa <LoopForever>:

LoopForever:
  b LoopForever
 8000cfa:	e7fe      	b.n	8000cfa <LoopForever>
  ldr   r0, =_estack
 8000cfc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d08:	08000f38 	.word	0x08000f38
  ldr r2, =_sbss
 8000d0c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d10:	20000038 	.word	0x20000038

08000d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_2_IRQHandler>
	...

08000d18 <__libc_init_array>:
 8000d18:	b570      	push	{r4, r5, r6, lr}
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	4d0c      	ldr	r5, [pc, #48]	@ (8000d50 <__libc_init_array+0x38>)
 8000d1e:	4c0d      	ldr	r4, [pc, #52]	@ (8000d54 <__libc_init_array+0x3c>)
 8000d20:	1b64      	subs	r4, r4, r5
 8000d22:	10a4      	asrs	r4, r4, #2
 8000d24:	42a6      	cmp	r6, r4
 8000d26:	d109      	bne.n	8000d3c <__libc_init_array+0x24>
 8000d28:	f000 f81a 	bl	8000d60 <_init>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	4d0a      	ldr	r5, [pc, #40]	@ (8000d58 <__libc_init_array+0x40>)
 8000d30:	4c0a      	ldr	r4, [pc, #40]	@ (8000d5c <__libc_init_array+0x44>)
 8000d32:	1b64      	subs	r4, r4, r5
 8000d34:	10a4      	asrs	r4, r4, #2
 8000d36:	42a6      	cmp	r6, r4
 8000d38:	d105      	bne.n	8000d46 <__libc_init_array+0x2e>
 8000d3a:	bd70      	pop	{r4, r5, r6, pc}
 8000d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d40:	4798      	blx	r3
 8000d42:	3601      	adds	r6, #1
 8000d44:	e7ee      	b.n	8000d24 <__libc_init_array+0xc>
 8000d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d4a:	4798      	blx	r3
 8000d4c:	3601      	adds	r6, #1
 8000d4e:	e7f2      	b.n	8000d36 <__libc_init_array+0x1e>
 8000d50:	08000f30 	.word	0x08000f30
 8000d54:	08000f30 	.word	0x08000f30
 8000d58:	08000f30 	.word	0x08000f30
 8000d5c:	08000f34 	.word	0x08000f34

08000d60 <_init>:
 8000d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d62:	bf00      	nop
 8000d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d66:	bc08      	pop	{r3}
 8000d68:	469e      	mov	lr, r3
 8000d6a:	4770      	bx	lr

08000d6c <_fini>:
 8000d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6e:	bf00      	nop
 8000d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d72:	bc08      	pop	{r3}
 8000d74:	469e      	mov	lr, r3
 8000d76:	4770      	bx	lr
