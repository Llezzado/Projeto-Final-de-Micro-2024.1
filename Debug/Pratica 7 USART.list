
Pratica 7 USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000900  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08000a30  08000a30  00001a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b3c  08000b3c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000b3c  08000b3c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b3c  08000b3c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b3c  08000b3c  00001b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b40  08000b40  00001b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000b44  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  08000b48  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000b48  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000916  00000000  00000000  0000202d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002e4  00000000  00000000  00002943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00002c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000080  00000000  00000000  00002cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010996  00000000  00000000  00002d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c08  00000000  00000000  000136ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057dc5  00000000  00000000  000142f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006c0bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000218  00000000  00000000  0006c100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0006c318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a18 	.word	0x08000a18

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000a18 	.word	0x08000a18

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <main>:
int check_cmd(char *str);



int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b084      	sub	sp, #16
 80001ac:	af00      	add	r7, sp, #0
	gpio_setup();
 80001ae:	f000 f8cf 	bl	8000350 <gpio_setup>
	timer4_setup();
 80001b2:	f000 fae9 	bl	8000788 <timer4_setup>
	pwm_setup();
 80001b6:	f000 f9ef 	bl	8000598 <pwm_setup>
	USART1_setup();
 80001ba:	f000 f907 	bl	80003cc <USART1_setup>


	uart_write("\r\ntest!\n\r");
 80001be:	485a      	ldr	r0, [pc, #360]	@ (8000328 <main+0x180>)
 80001c0:	f000 f998 	bl	80004f4 <uart_write>

	uint8_t val_pwm = 0;
 80001c4:	2300      	movs	r3, #0
 80001c6:	73fb      	strb	r3, [r7, #15]

	TIM2->CCER |= TIM_CCER_CC3E;
 80001c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001cc:	6a1b      	ldr	r3, [r3, #32]
 80001ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80001d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80001d6:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= TIM_CCER_CC4E;
 80001d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001dc:	6a1b      	ldr	r3, [r3, #32]
 80001de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80001e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80001e6:	6213      	str	r3, [r2, #32]
	TIM3->CCER |= TIM_CCER_CC1E;
 80001e8:	4b50      	ldr	r3, [pc, #320]	@ (800032c <main+0x184>)
 80001ea:	6a1b      	ldr	r3, [r3, #32]
 80001ec:	4a4f      	ldr	r2, [pc, #316]	@ (800032c <main+0x184>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6213      	str	r3, [r2, #32]

	while(1)
	{


		if(MAIN_SM)
 80001f4:	4b4e      	ldr	r3, [pc, #312]	@ (8000330 <main+0x188>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d0fb      	beq.n	80001f4 <main+0x4c>
		{
			MAIN_SM = 0;
 80001fc:	4b4c      	ldr	r3, [pc, #304]	@ (8000330 <main+0x188>)
 80001fe:	2200      	movs	r2, #0
 8000200:	701a      	strb	r2, [r3, #0]


			// Para demo
			if( (buffer[0] == 'd' || buffer[0] == 'D')&&(buffer[1] == 0) )  {
 8000202:	4b4c      	ldr	r3, [pc, #304]	@ (8000334 <main+0x18c>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	2b64      	cmp	r3, #100	@ 0x64
 8000208:	d003      	beq.n	8000212 <main+0x6a>
 800020a:	4b4a      	ldr	r3, [pc, #296]	@ (8000334 <main+0x18c>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	2b44      	cmp	r3, #68	@ 0x44
 8000210:	d123      	bne.n	800025a <main+0xb2>
 8000212:	4b48      	ldr	r3, [pc, #288]	@ (8000334 <main+0x18c>)
 8000214:	785b      	ldrb	r3, [r3, #1]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d11f      	bne.n	800025a <main+0xb2>

				buffer[0] = '!';buffer[1] = '!';
 800021a:	4b46      	ldr	r3, [pc, #280]	@ (8000334 <main+0x18c>)
 800021c:	2221      	movs	r2, #33	@ 0x21
 800021e:	701a      	strb	r2, [r3, #0]
 8000220:	4b44      	ldr	r3, [pc, #272]	@ (8000334 <main+0x18c>)
 8000222:	2221      	movs	r2, #33	@ 0x21
 8000224:	705a      	strb	r2, [r3, #1]
				if(demo_key == Desativado){
 8000226:	4b44      	ldr	r3, [pc, #272]	@ (8000338 <main+0x190>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d103      	bne.n	8000236 <main+0x8e>
					uart_write("modo de Demonstracao\n\r");
 800022e:	4843      	ldr	r0, [pc, #268]	@ (800033c <main+0x194>)
 8000230:	f000 f960 	bl	80004f4 <uart_write>
 8000234:	e002      	b.n	800023c <main+0x94>
				}else{
					uart_write("modo de Controle\n\r");
 8000236:	4842      	ldr	r0, [pc, #264]	@ (8000340 <main+0x198>)
 8000238:	f000 f95c 	bl	80004f4 <uart_write>
				}


				demo_key = !demo_key;
 800023c:	4b3e      	ldr	r3, [pc, #248]	@ (8000338 <main+0x190>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	bf0c      	ite	eq
 8000244:	2301      	moveq	r3, #1
 8000246:	2300      	movne	r3, #0
 8000248:	b2db      	uxtb	r3, r3
 800024a:	461a      	mov	r2, r3
 800024c:	4b3a      	ldr	r3, [pc, #232]	@ (8000338 <main+0x190>)
 800024e:	701a      	strb	r2, [r3, #0]
				timer4_OnOff(demo_key);
 8000250:	4b39      	ldr	r3, [pc, #228]	@ (8000338 <main+0x190>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fab7 	bl	80007c8 <timer4_OnOff>
			}

			if(demo_key){
 800025a:	4b37      	ldr	r3, [pc, #220]	@ (8000338 <main+0x190>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d02f      	beq.n	80002c2 <main+0x11a>

				MAIN_SM = Ativado;
 8000262:	4b33      	ldr	r3, [pc, #204]	@ (8000330 <main+0x188>)
 8000264:	2201      	movs	r2, #1
 8000266:	701a      	strb	r2, [r3, #0]

				for (volatile int i=0;i<100;i++)
 8000268:	2300      	movs	r3, #0
 800026a:	60bb      	str	r3, [r7, #8]
 800026c:	e00f      	b.n	800028e <main+0xe6>
				{
					TIM2->CCR4=i;
 800026e:	68ba      	ldr	r2, [r7, #8]
 8000270:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000274:	641a      	str	r2, [r3, #64]	@ 0x40
					TIM2->CCR3=i;
 8000276:	68ba      	ldr	r2, [r7, #8]
 8000278:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800027c:	63da      	str	r2, [r3, #60]	@ 0x3c
					TIM3->CCR1 = i;
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	4b2a      	ldr	r3, [pc, #168]	@ (800032c <main+0x184>)
 8000282:	635a      	str	r2, [r3, #52]	@ 0x34
					timer1_delay();
 8000284:	f000 fa4c 	bl	8000720 <timer1_delay>
				for (volatile int i=0;i<100;i++)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	3301      	adds	r3, #1
 800028c:	60bb      	str	r3, [r7, #8]
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	2b63      	cmp	r3, #99	@ 0x63
 8000292:	ddec      	ble.n	800026e <main+0xc6>
				}

				for (volatile int i=100;i>0;i--)
 8000294:	2364      	movs	r3, #100	@ 0x64
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	e00f      	b.n	80002ba <main+0x112>
				{
					TIM2->CCR4=i;
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a0:	641a      	str	r2, [r3, #64]	@ 0x40
					TIM2->CCR3=i;
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a8:	63da      	str	r2, [r3, #60]	@ 0x3c
					TIM3->CCR1=i;
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	4b1f      	ldr	r3, [pc, #124]	@ (800032c <main+0x184>)
 80002ae:	635a      	str	r2, [r3, #52]	@ 0x34
					timer1_delay();
 80002b0:	f000 fa36 	bl	8000720 <timer1_delay>
				for (volatile int i=100;i>0;i--)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3b01      	subs	r3, #1
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	dcec      	bgt.n	800029a <main+0xf2>
 80002c0:	e798      	b.n	80001f4 <main+0x4c>

			}else
			{

				// Para cmd
				val_pwm = string_para_int(buffer);
 80002c2:	481c      	ldr	r0, [pc, #112]	@ (8000334 <main+0x18c>)
 80002c4:	f000 f936 	bl	8000534 <string_para_int>
 80002c8:	4603      	mov	r3, r0
 80002ca:	73fb      	strb	r3, [r7, #15]

				if(buffer[0] == 'r' || buffer[0] == 'R'){
 80002cc:	4b19      	ldr	r3, [pc, #100]	@ (8000334 <main+0x18c>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b72      	cmp	r3, #114	@ 0x72
 80002d2:	d003      	beq.n	80002dc <main+0x134>
 80002d4:	4b17      	ldr	r3, [pc, #92]	@ (8000334 <main+0x18c>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	2b52      	cmp	r3, #82	@ 0x52
 80002da:	d106      	bne.n	80002ea <main+0x142>

					uart_write("vermelho\n\r");
 80002dc:	4819      	ldr	r0, [pc, #100]	@ (8000344 <main+0x19c>)
 80002de:	f000 f909 	bl	80004f4 <uart_write>
					TIM2->CCR3=val_pwm;
 80002e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e6:	7bfb      	ldrb	r3, [r7, #15]
 80002e8:	63d3      	str	r3, [r2, #60]	@ 0x3c

					//GPIOB->ODR ^= 0x00000040;
				}

				if(buffer[0] == 'g' || buffer[0] == 'G'){
 80002ea:	4b12      	ldr	r3, [pc, #72]	@ (8000334 <main+0x18c>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b67      	cmp	r3, #103	@ 0x67
 80002f0:	d003      	beq.n	80002fa <main+0x152>
 80002f2:	4b10      	ldr	r3, [pc, #64]	@ (8000334 <main+0x18c>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b47      	cmp	r3, #71	@ 0x47
 80002f8:	d106      	bne.n	8000308 <main+0x160>

					uart_write("verde\n\r");
 80002fa:	4813      	ldr	r0, [pc, #76]	@ (8000348 <main+0x1a0>)
 80002fc:	f000 f8fa 	bl	80004f4 <uart_write>
					TIM2->CCR4=val_pwm;
 8000300:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000304:	7bfb      	ldrb	r3, [r7, #15]
 8000306:	6413      	str	r3, [r2, #64]	@ 0x40
					//GPIOB->ODR ^= 0x00000080;
				}

				if(buffer[0] == 'b' || buffer[0] == 'B'){
 8000308:	4b0a      	ldr	r3, [pc, #40]	@ (8000334 <main+0x18c>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b62      	cmp	r3, #98	@ 0x62
 800030e:	d004      	beq.n	800031a <main+0x172>
 8000310:	4b08      	ldr	r3, [pc, #32]	@ (8000334 <main+0x18c>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b42      	cmp	r3, #66	@ 0x42
 8000316:	f47f af6d 	bne.w	80001f4 <main+0x4c>

					uart_write("azul\n\r");
 800031a:	480c      	ldr	r0, [pc, #48]	@ (800034c <main+0x1a4>)
 800031c:	f000 f8ea 	bl	80004f4 <uart_write>
					TIM3->CCR1 = val_pwm;
 8000320:	4a02      	ldr	r2, [pc, #8]	@ (800032c <main+0x184>)
 8000322:	7bfb      	ldrb	r3, [r7, #15]
 8000324:	6353      	str	r3, [r2, #52]	@ 0x34
		if(MAIN_SM)
 8000326:	e765      	b.n	80001f4 <main+0x4c>
 8000328:	08000a30 	.word	0x08000a30
 800032c:	40000400 	.word	0x40000400
 8000330:	2000002b 	.word	0x2000002b
 8000334:	20000024 	.word	0x20000024
 8000338:	20000020 	.word	0x20000020
 800033c:	08000a3c 	.word	0x08000a3c
 8000340:	08000a54 	.word	0x08000a54
 8000344:	08000a68 	.word	0x08000a68
 8000348:	08000a74 	.word	0x08000a74
 800034c:	08000a7c 	.word	0x08000a7c

08000350 <gpio_setup>:
			}

	}
}

void gpio_setup(){
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
	/*Configure GPIO*/

	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN;
 8000354:	4b19      	ldr	r3, [pc, #100]	@ (80003bc <gpio_setup+0x6c>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a18      	ldr	r2, [pc, #96]	@ (80003bc <gpio_setup+0x6c>)
 800035a:	f043 030c 	orr.w	r3, r3, #12
 800035e:	6193      	str	r3, [r2, #24]

	// GPIO b11,b10,Pa6  para funções AFIO pwm
	GPIOA->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6);
 8000360:	4b17      	ldr	r3, [pc, #92]	@ (80003c0 <gpio_setup+0x70>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a16      	ldr	r2, [pc, #88]	@ (80003c0 <gpio_setup+0x70>)
 8000366:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800036a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_CNF6_1 | GPIO_CRL_MODE6_0);
 800036c:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <gpio_setup+0x70>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a13      	ldr	r2, [pc, #76]	@ (80003c0 <gpio_setup+0x70>)
 8000372:	f043 6330 	orr.w	r3, r3, #184549376	@ 0xb000000
 8000376:	6013      	str	r3, [r2, #0]

	GPIOB->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10 |
 8000378:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <gpio_setup+0x74>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	4a11      	ldr	r2, [pc, #68]	@ (80003c4 <gpio_setup+0x74>)
 800037e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000382:	6053      	str	r3, [r2, #4]
			GPIO_CRH_MODE11 | GPIO_CRH_CNF11);

	GPIOB->CRH |= (GPIO_CRH_MODE10_0 |GPIO_CRH_MODE10_1 |
 8000384:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <gpio_setup+0x74>)
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	4a0e      	ldr	r2, [pc, #56]	@ (80003c4 <gpio_setup+0x74>)
 800038a:	f443 433b 	orr.w	r3, r3, #47872	@ 0xbb00
 800038e:	6053      	str	r3, [r2, #4]
			GPIO_CRH_CNF10_1 | GPIO_CRH_MODE11_0 |
			GPIO_CRH_MODE11_1 | GPIO_CRH_CNF11_1);


	// afio
	RCC->APB2ENR |= (1 << 0);
 8000390:	4b0a      	ldr	r3, [pc, #40]	@ (80003bc <gpio_setup+0x6c>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a09      	ldr	r2, [pc, #36]	@ (80003bc <gpio_setup+0x6c>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	6193      	str	r3, [r2, #24]

	AFIO->MAPR &= ~AFIO_MAPR_TIM2_REMAP;
 800039c:	4b0a      	ldr	r3, [pc, #40]	@ (80003c8 <gpio_setup+0x78>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	4a09      	ldr	r2, [pc, #36]	@ (80003c8 <gpio_setup+0x78>)
 80003a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80003a6:	6053      	str	r3, [r2, #4]
	AFIO->MAPR |= (3 << 8);
 80003a8:	4b07      	ldr	r3, [pc, #28]	@ (80003c8 <gpio_setup+0x78>)
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	4a06      	ldr	r2, [pc, #24]	@ (80003c8 <gpio_setup+0x78>)
 80003ae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80003b2:	6053      	str	r3, [r2, #4]
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40010800 	.word	0x40010800
 80003c4:	40010c00 	.word	0x40010c00
 80003c8:	40010000 	.word	0x40010000

080003cc <USART1_setup>:

void USART1_setup(){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0

	/*UART1 Pin configuration*/
	//enable clock access to GPIOA
	RCC->APB2ENR|=RCC_APB2ENR_IOPAEN;
 80003d0:	4b1e      	ldr	r3, [pc, #120]	@ (800044c <USART1_setup+0x80>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a1d      	ldr	r2, [pc, #116]	@ (800044c <USART1_setup+0x80>)
 80003d6:	f043 0304 	orr.w	r3, r3, #4
 80003da:	6193      	str	r3, [r2, #24]

	/*Configure PA9(TX) as output maximum speed to 50MHz
	 * and alternate output push-pull mode for USART1*/
	GPIOA->CRH &= 0xFFFFFF0F;
 80003dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000450 <USART1_setup+0x84>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000450 <USART1_setup+0x84>)
 80003e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80003e6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000B0;
 80003e8:	4b19      	ldr	r3, [pc, #100]	@ (8000450 <USART1_setup+0x84>)
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	4a18      	ldr	r2, [pc, #96]	@ (8000450 <USART1_setup+0x84>)
 80003ee:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80003f2:	6053      	str	r3, [r2, #4]

	//Configure PA10(RX) as as input floating as following
	GPIOA->CRH &= 0xFFFFF0FF;
 80003f4:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <USART1_setup+0x84>)
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	4a15      	ldr	r2, [pc, #84]	@ (8000450 <USART1_setup+0x84>)
 80003fa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80003fe:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x00000400;
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <USART1_setup+0x84>)
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	4a12      	ldr	r2, [pc, #72]	@ (8000450 <USART1_setup+0x84>)
 8000406:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800040a:	6053      	str	r3, [r2, #4]

	/*USART1 configuration*/

	//enable clock access to USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800040c:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <USART1_setup+0x80>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a0e      	ldr	r2, [pc, #56]	@ (800044c <USART1_setup+0x80>)
 8000412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000416:	6193      	str	r3, [r2, #24]
	//Enable receiver
	USART1->CR1 |= USART_CR1_RE | USART_CR1_TE;
 8000418:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <USART1_setup+0x88>)
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	4a0d      	ldr	r2, [pc, #52]	@ (8000454 <USART1_setup+0x88>)
 800041e:	f043 030c 	orr.w	r3, r3, #12
 8000422:	60d3      	str	r3, [r2, #12]
	//Set Baud Rate
	USART1->BRR = ((CPU_CLK + (BaudRate/2U))/BaudRate);
 8000424:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <USART1_setup+0x88>)
 8000426:	2245      	movs	r2, #69	@ 0x45
 8000428:	609a      	str	r2, [r3, #8]
	//Enable RXNIE interrupt
	USART1->CR1|=USART_CR1_RXNEIE;
 800042a:	4b0a      	ldr	r3, [pc, #40]	@ (8000454 <USART1_setup+0x88>)
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	4a09      	ldr	r2, [pc, #36]	@ (8000454 <USART1_setup+0x88>)
 8000430:	f043 0320 	orr.w	r3, r3, #32
 8000434:	60d3      	str	r3, [r2, #12]
	//Enable USART1 interrupt in NVIC
	NVIC_EnableIRQ(USART1_IRQn);
 8000436:	2025      	movs	r0, #37	@ 0x25
 8000438:	f7ff fe9a 	bl	8000170 <__NVIC_EnableIRQ>
	//Enable UART
	USART1->CR1 |= USART_CR1_UE;
 800043c:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <USART1_setup+0x88>)
 800043e:	68db      	ldr	r3, [r3, #12]
 8000440:	4a04      	ldr	r2, [pc, #16]	@ (8000454 <USART1_setup+0x88>)
 8000442:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000446:	60d3      	str	r3, [r2, #12]
}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}
 800044c:	40021000 	.word	0x40021000
 8000450:	40010800 	.word	0x40010800
 8000454:	40013800 	.word	0x40013800

08000458 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
    /* Verifica a origem da interrupção */
    if (USART1->SR & USART_SR_RXNE) /* Recebeu um caractere */
 800045c:	4b20      	ldr	r3, [pc, #128]	@ (80004e0 <USART1_IRQHandler+0x88>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f003 0320 	and.w	r3, r3, #32
 8000464:	2b00      	cmp	r3, #0
 8000466:	d038      	beq.n	80004da <USART1_IRQHandler+0x82>
    {
        /* Lê o dado */
        ch = USART1->DR;
 8000468:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <USART1_IRQHandler+0x88>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	b2da      	uxtb	r2, r3
 800046e:	4b1d      	ldr	r3, [pc, #116]	@ (80004e4 <USART1_IRQHandler+0x8c>)
 8000470:	701a      	strb	r2, [r3, #0]
        uart_write(&ch);
 8000472:	481c      	ldr	r0, [pc, #112]	@ (80004e4 <USART1_IRQHandler+0x8c>)
 8000474:	f000 f83e 	bl	80004f4 <uart_write>
        // Armazena o caractere no buffer
        if (buffer_index < sizeof(buffer) - 1)  // Certifica-se de não ultrapassar o tamanho do buffer
 8000478:	4b1b      	ldr	r3, [pc, #108]	@ (80004e8 <USART1_IRQHandler+0x90>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b04      	cmp	r3, #4
 800047e:	d829      	bhi.n	80004d4 <USART1_IRQHandler+0x7c>
        {
            buffer[buffer_index++] = ch;
 8000480:	4b19      	ldr	r3, [pc, #100]	@ (80004e8 <USART1_IRQHandler+0x90>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	1c5a      	adds	r2, r3, #1
 8000486:	b2d1      	uxtb	r1, r2
 8000488:	4a17      	ldr	r2, [pc, #92]	@ (80004e8 <USART1_IRQHandler+0x90>)
 800048a:	7011      	strb	r1, [r2, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	4b15      	ldr	r3, [pc, #84]	@ (80004e4 <USART1_IRQHandler+0x8c>)
 8000490:	7819      	ldrb	r1, [r3, #0]
 8000492:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <USART1_IRQHandler+0x94>)
 8000494:	5499      	strb	r1, [r3, r2]

            // Verifica se o caractere recebido é o fim da string (ex: '\n' ou '\r')
            if (ch == '\n' || ch == '\r')
 8000496:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <USART1_IRQHandler+0x8c>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b0a      	cmp	r3, #10
 800049c:	d003      	beq.n	80004a6 <USART1_IRQHandler+0x4e>
 800049e:	4b11      	ldr	r3, [pc, #68]	@ (80004e4 <USART1_IRQHandler+0x8c>)
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b0d      	cmp	r3, #13
 80004a4:	d119      	bne.n	80004da <USART1_IRQHandler+0x82>
            {
                buffer[buffer_index - 1] = '\0';  // Substitui o terminador por NULL para formar a string
 80004a6:	4b10      	ldr	r3, [pc, #64]	@ (80004e8 <USART1_IRQHandler+0x90>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	3b01      	subs	r3, #1
 80004ac:	4a0f      	ldr	r2, [pc, #60]	@ (80004ec <USART1_IRQHandler+0x94>)
 80004ae:	2100      	movs	r1, #0
 80004b0:	54d1      	strb	r1, [r2, r3]

                ch = '\n';
 80004b2:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <USART1_IRQHandler+0x8c>)
 80004b4:	220a      	movs	r2, #10
 80004b6:	701a      	strb	r2, [r3, #0]
                uart_write(&ch);
 80004b8:	480a      	ldr	r0, [pc, #40]	@ (80004e4 <USART1_IRQHandler+0x8c>)
 80004ba:	f000 f81b 	bl	80004f4 <uart_write>

                MAIN_SM = check_cmd(buffer);  // Sinaliza que a string foi recebida
 80004be:	480b      	ldr	r0, [pc, #44]	@ (80004ec <USART1_IRQHandler+0x94>)
 80004c0:	f000 f8b8 	bl	8000634 <check_cmd>
 80004c4:	4603      	mov	r3, r0
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <USART1_IRQHandler+0x98>)
 80004ca:	701a      	strb	r2, [r3, #0]




                buffer_index = 0;  // Reseta o índice para a próxima string
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <USART1_IRQHandler+0x90>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
            // Buffer cheio, reiniciar para evitar estouro
            buffer_index = 0;
        }

    }
}
 80004d2:	e002      	b.n	80004da <USART1_IRQHandler+0x82>
            buffer_index = 0;
 80004d4:	4b04      	ldr	r3, [pc, #16]	@ (80004e8 <USART1_IRQHandler+0x90>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	701a      	strb	r2, [r3, #0]
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40013800 	.word	0x40013800
 80004e4:	20000000 	.word	0x20000000
 80004e8:	2000002a 	.word	0x2000002a
 80004ec:	20000024 	.word	0x20000024
 80004f0:	2000002b 	.word	0x2000002b

080004f4 <uart_write>:


void uart_write(uint8_t *ch)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	while(*ch)
 80004fc:	e00d      	b.n	800051a <uart_write+0x26>
	{
		//Make sure the transmit data register is empty
		while(!(USART1->SR & USART_SR_TXE)){}
 80004fe:	bf00      	nop
 8000500:	4b0b      	ldr	r3, [pc, #44]	@ (8000530 <uart_write+0x3c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000508:	2b00      	cmp	r3, #0
 800050a:	d0f9      	beq.n	8000500 <uart_write+0xc>
		//Write to transmit data register
		USART1->DR	=  (*ch & 0xFF);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	781a      	ldrb	r2, [r3, #0]
 8000510:	4b07      	ldr	r3, [pc, #28]	@ (8000530 <uart_write+0x3c>)
 8000512:	605a      	str	r2, [r3, #4]
		ch++;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	3301      	adds	r3, #1
 8000518:	607b      	str	r3, [r7, #4]
	while(*ch)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d1ed      	bne.n	80004fe <uart_write+0xa>
	}
}
 8000522:	bf00      	nop
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40013800 	.word	0x40013800

08000534 <string_para_int>:
    } else {
        return 0;  // Strings são diferentes
    }
}

int string_para_int(char *str){
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]

	if (str[1] < '0' || str[1] > '9' || str[2] < '0' || str[2] > '9') {
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3301      	adds	r3, #1
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b2f      	cmp	r3, #47	@ 0x2f
 8000544:	d90e      	bls.n	8000564 <string_para_int+0x30>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	3301      	adds	r3, #1
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b39      	cmp	r3, #57	@ 0x39
 800054e:	d809      	bhi.n	8000564 <string_para_int+0x30>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3302      	adds	r3, #2
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b2f      	cmp	r3, #47	@ 0x2f
 8000558:	d904      	bls.n	8000564 <string_para_int+0x30>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3302      	adds	r3, #2
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b39      	cmp	r3, #57	@ 0x39
 8000562:	d902      	bls.n	800056a <string_para_int+0x36>
        return -1;
 8000564:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000568:	e011      	b.n	800058e <string_para_int+0x5a>
    }
	int dezena = str[1] - '0';
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3301      	adds	r3, #1
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	3b30      	subs	r3, #48	@ 0x30
 8000572:	60fb      	str	r3, [r7, #12]
	int unidade = str[2] - '0';
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3302      	adds	r3, #2
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	3b30      	subs	r3, #48	@ 0x30
 800057c:	60bb      	str	r3, [r7, #8]

	return (dezena*10 + unidade);
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	4613      	mov	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	4413      	add	r3, r2
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	461a      	mov	r2, r3
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4413      	add	r3, r2

}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <pwm_setup>:

void pwm_setup(){
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

	/*
	 *trabalhando com timer 2S
	 */
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800059c:	4b23      	ldr	r3, [pc, #140]	@ (800062c <pwm_setup+0x94>)
 800059e:	69db      	ldr	r3, [r3, #28]
 80005a0:	4a22      	ldr	r2, [pc, #136]	@ (800062c <pwm_setup+0x94>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	61d3      	str	r3, [r2, #28]

	TIM2->PSC = 0;
 80005a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005ac:	2200      	movs	r2, #0
 80005ae:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 100;
 80005b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005b4:	2264      	movs	r2, #100	@ 0x64
 80005b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM2->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1;
 80005b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005c2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80005c6:	61d3      	str	r3, [r2, #28]

    TIM2->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1;
 80005c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005d2:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80005d6:	61d3      	str	r3, [r2, #28]

	/*
	 *trabalhando com timer 3
	 */
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80005d8:	4b14      	ldr	r3, [pc, #80]	@ (800062c <pwm_setup+0x94>)
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	4a13      	ldr	r2, [pc, #76]	@ (800062c <pwm_setup+0x94>)
 80005de:	f043 0302 	orr.w	r3, r3, #2
 80005e2:	61d3      	str	r3, [r2, #28]

	TIM3->PSC = 0;
 80005e4:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <pwm_setup+0x98>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 100;
 80005ea:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <pwm_setup+0x98>)
 80005ec:	2264      	movs	r2, #100	@ 0x64
 80005ee:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM3->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <pwm_setup+0x98>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000630 <pwm_setup+0x98>)
 80005f6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80005fa:	6193      	str	r3, [r2, #24]
	TIM3->CCER |= TIM_CCER_CC1E;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <pwm_setup+0x98>)
 80005fe:	6a1b      	ldr	r3, [r3, #32]
 8000600:	4a0b      	ldr	r2, [pc, #44]	@ (8000630 <pwm_setup+0x98>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= TIM_CR1_CEN;
 8000608:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= TIM_CR1_CEN;
 8000618:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <pwm_setup+0x98>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a04      	ldr	r2, [pc, #16]	@ (8000630 <pwm_setup+0x98>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000
 8000630:	40000400 	.word	0x40000400

08000634 <check_cmd>:

int check_cmd(char *str){
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 // cmd de demonstração
	if(
			((str[0] == 'd') || (str[0] == 'D')) &&
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	781b      	ldrb	r3, [r3, #0]
	if(
 8000640:	2b64      	cmp	r3, #100	@ 0x64
 8000642:	d003      	beq.n	800064c <check_cmd+0x18>
			((str[0] == 'd') || (str[0] == 'D')) &&
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b44      	cmp	r3, #68	@ 0x44
 800064a:	d106      	bne.n	800065a <check_cmd+0x26>
			(str[1] == 0)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	3301      	adds	r3, #1
 8000650:	781b      	ldrb	r3, [r3, #0]
			((str[0] == 'd') || (str[0] == 'D')) &&
 8000652:	2b00      	cmp	r3, #0
 8000654:	d101      	bne.n	800065a <check_cmd+0x26>
	)
	{
		return 1;
 8000656:	2301      	movs	r3, #1
 8000658:	e053      	b.n	8000702 <check_cmd+0xce>
	}

	if(demo_key){
 800065a:	4b2c      	ldr	r3, [pc, #176]	@ (800070c <check_cmd+0xd8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d004      	beq.n	800066c <check_cmd+0x38>

		uart_write("Desabilite o Modo DEMO primeiro com o comando d \n\r erro 2\n\r");
 8000662:	482b      	ldr	r0, [pc, #172]	@ (8000710 <check_cmd+0xdc>)
 8000664:	f7ff ff46 	bl	80004f4 <uart_write>
		return 0;
 8000668:	2300      	movs	r3, #0
 800066a:	e04a      	b.n	8000702 <check_cmd+0xce>
	}

// cmd de comandos

	if(
			(str[1] == 0 ) ||
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3301      	adds	r3, #1
 8000670:	781b      	ldrb	r3, [r3, #0]
	if(
 8000672:	2b00      	cmp	r3, #0
 8000674:	d009      	beq.n	800068a <check_cmd+0x56>
			(str[2] == 0 ) ||
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3302      	adds	r3, #2
 800067a:	781b      	ldrb	r3, [r3, #0]
			(str[1] == 0 ) ||
 800067c:	2b00      	cmp	r3, #0
 800067e:	d004      	beq.n	800068a <check_cmd+0x56>
			(str[3] != 0 )
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3303      	adds	r3, #3
 8000684:	781b      	ldrb	r3, [r3, #0]
			(str[2] == 0 ) ||
 8000686:	2b00      	cmp	r3, #0
 8000688:	d004      	beq.n	8000694 <check_cmd+0x60>
		)

	{
		uart_write("Comado incompleto ou com caracteres demais \n\r erro 0\n\r");
 800068a:	4822      	ldr	r0, [pc, #136]	@ (8000714 <check_cmd+0xe0>)
 800068c:	f7ff ff32 	bl	80004f4 <uart_write>
		return 0;
 8000690:	2300      	movs	r3, #0
 8000692:	e036      	b.n	8000702 <check_cmd+0xce>




	if (
			(str[0] != 'r') &&
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
	if (
 8000698:	2b72      	cmp	r3, #114	@ 0x72
 800069a:	d018      	beq.n	80006ce <check_cmd+0x9a>
			(str[0] != 'R') &&
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	781b      	ldrb	r3, [r3, #0]
			(str[0] != 'r') &&
 80006a0:	2b52      	cmp	r3, #82	@ 0x52
 80006a2:	d014      	beq.n	80006ce <check_cmd+0x9a>
			(str[0] != 'g') &&
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	781b      	ldrb	r3, [r3, #0]
			(str[0] != 'R') &&
 80006a8:	2b67      	cmp	r3, #103	@ 0x67
 80006aa:	d010      	beq.n	80006ce <check_cmd+0x9a>
			(str[0] != 'G') &&
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	781b      	ldrb	r3, [r3, #0]
			(str[0] != 'g') &&
 80006b0:	2b47      	cmp	r3, #71	@ 0x47
 80006b2:	d00c      	beq.n	80006ce <check_cmd+0x9a>
			(str[0] != 'b') &&
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	781b      	ldrb	r3, [r3, #0]
			(str[0] != 'G') &&
 80006b8:	2b62      	cmp	r3, #98	@ 0x62
 80006ba:	d008      	beq.n	80006ce <check_cmd+0x9a>
			(str[0] != 'B')
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	781b      	ldrb	r3, [r3, #0]
			(str[0] != 'b') &&
 80006c0:	2b42      	cmp	r3, #66	@ 0x42
 80006c2:	d004      	beq.n	80006ce <check_cmd+0x9a>
			)
	{
		uart_write("Comando Desconhecido\n\r erro 1\n\r");
 80006c4:	4814      	ldr	r0, [pc, #80]	@ (8000718 <check_cmd+0xe4>)
 80006c6:	f7ff ff15 	bl	80004f4 <uart_write>
		return 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e019      	b.n	8000702 <check_cmd+0xce>
	};

	if (
			((str[1] >= '0')&&(str[1] <= '9')) &&
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3301      	adds	r3, #1
 80006d2:	781b      	ldrb	r3, [r3, #0]
	if (
 80006d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80006d6:	d910      	bls.n	80006fa <check_cmd+0xc6>
			((str[1] >= '0')&&(str[1] <= '9')) &&
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3301      	adds	r3, #1
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b39      	cmp	r3, #57	@ 0x39
 80006e0:	d80b      	bhi.n	80006fa <check_cmd+0xc6>

			((str[2] >= '0')&&(str[2] <= '9'))
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3302      	adds	r3, #2
 80006e6:	781b      	ldrb	r3, [r3, #0]
			((str[1] >= '0')&&(str[1] <= '9')) &&
 80006e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80006ea:	d906      	bls.n	80006fa <check_cmd+0xc6>
			((str[2] >= '0')&&(str[2] <= '9'))
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3302      	adds	r3, #2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b39      	cmp	r3, #57	@ 0x39
 80006f4:	d801      	bhi.n	80006fa <check_cmd+0xc6>
		)

	{

		return 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e003      	b.n	8000702 <check_cmd+0xce>
	};


	uart_write("Comando Fora de alcançe\n\r erro 3\n\r");
 80006fa:	4808      	ldr	r0, [pc, #32]	@ (800071c <check_cmd+0xe8>)
 80006fc:	f7ff fefa 	bl	80004f4 <uart_write>

	return 0;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000020 	.word	0x20000020
 8000710:	08000a84 	.word	0x08000a84
 8000714:	08000ac0 	.word	0x08000ac0
 8000718:	08000af8 	.word	0x08000af8
 800071c:	08000b18 	.word	0x08000b18

08000720 <timer1_delay>:

void timer1_delay() {
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000724:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <timer1_delay+0x60>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a15      	ldr	r2, [pc, #84]	@ (8000780 <timer1_delay+0x60>)
 800072a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800072e:	6193      	str	r3, [r2, #24]

    TIM1->PSC = 7200 - 1; // O prescaler divide o clock para 10 kHz (72 MHz / 7200)
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <timer1_delay+0x64>)
 8000732:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000736:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM1->ARR =  10 - 1;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <timer1_delay+0x64>)
 800073a:	2209      	movs	r2, #9
 800073c:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM1->CNT = 0;
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <timer1_delay+0x64>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM1->CR1 |= TIM_CR1_CEN;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <timer1_delay+0x64>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0e      	ldr	r2, [pc, #56]	@ (8000784 <timer1_delay+0x64>)
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	6013      	str	r3, [r2, #0]

    while (!(TIM1->SR & TIM_SR_UIF)); //delay
 8000750:	bf00      	nop
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <timer1_delay+0x64>)
 8000754:	691b      	ldr	r3, [r3, #16]
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	2b00      	cmp	r3, #0
 800075c:	d0f9      	beq.n	8000752 <timer1_delay+0x32>

    TIM1->SR &= ~TIM_SR_UIF;
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <timer1_delay+0x64>)
 8000760:	691b      	ldr	r3, [r3, #16]
 8000762:	4a08      	ldr	r2, [pc, #32]	@ (8000784 <timer1_delay+0x64>)
 8000764:	f023 0301 	bic.w	r3, r3, #1
 8000768:	6113      	str	r3, [r2, #16]
    TIM1->CR1 &= ~TIM_CR1_CEN;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <timer1_delay+0x64>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a05      	ldr	r2, [pc, #20]	@ (8000784 <timer1_delay+0x64>)
 8000770:	f023 0301 	bic.w	r3, r3, #1
 8000774:	6013      	str	r3, [r2, #0]
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000
 8000784:	40012c00 	.word	0x40012c00

08000788 <timer4_setup>:

void timer4_setup(){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	//
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <timer4_setup+0x38>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <timer4_setup+0x38>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	61d3      	str	r3, [r2, #28]

		TIM4->PSC = 7200 - 1;
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <timer4_setup+0x3c>)
 800079a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800079e:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM4->ARR = 2000 - 1;
 80007a0:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <timer4_setup+0x3c>)
 80007a2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80007a6:	62da      	str	r2, [r3, #44]	@ 0x2c

		 TIM4->DIER |= TIM_DIER_UIE;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <timer4_setup+0x3c>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	4a05      	ldr	r2, [pc, #20]	@ (80007c4 <timer4_setup+0x3c>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	60d3      	str	r3, [r2, #12]

		 NVIC_EnableIRQ(TIM4_IRQn);
 80007b4:	201e      	movs	r0, #30
 80007b6:	f7ff fcdb 	bl	8000170 <__NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40000800 	.word	0x40000800

080007c8 <timer4_OnOff>:

void  timer4_OnOff(unsigned char x){
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
	if(x){
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d006      	beq.n	80007e6 <timer4_OnOff+0x1e>
		TIM4->CR1 |= TIM_CR1_CEN;
 80007d8:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <timer4_OnOff+0x68>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a14      	ldr	r2, [pc, #80]	@ (8000830 <timer4_OnOff+0x68>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6013      	str	r3, [r2, #0]
		TIM2->CCER |= TIM_CCER_CC3E;
		TIM2->CCER |= TIM_CCER_CC4E;
		TIM3->CCER |= TIM_CCER_CC1E;
	}

}
 80007e4:	e01e      	b.n	8000824 <timer4_OnOff+0x5c>
		TIM4->CR1 &= ~TIM_CR1_CEN;
 80007e6:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <timer4_OnOff+0x68>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a11      	ldr	r2, [pc, #68]	@ (8000830 <timer4_OnOff+0x68>)
 80007ec:	f023 0301 	bic.w	r3, r3, #1
 80007f0:	6013      	str	r3, [r2, #0]
		key = 0;
 80007f2:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <timer4_OnOff+0x6c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
		TIM2->CCER |= TIM_CCER_CC3E;
 80007f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007fc:	6a1b      	ldr	r3, [r3, #32]
 80007fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000806:	6213      	str	r3, [r2, #32]
		TIM2->CCER |= TIM_CCER_CC4E;
 8000808:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800080c:	6a1b      	ldr	r3, [r3, #32]
 800080e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000812:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000816:	6213      	str	r3, [r2, #32]
		TIM3->CCER |= TIM_CCER_CC1E;
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <timer4_OnOff+0x70>)
 800081a:	6a1b      	ldr	r3, [r3, #32]
 800081c:	4a06      	ldr	r2, [pc, #24]	@ (8000838 <timer4_OnOff+0x70>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	6213      	str	r3, [r2, #32]
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40000800 	.word	0x40000800
 8000834:	20000021 	.word	0x20000021
 8000838:	40000400 	.word	0x40000400

0800083c <TIM4_IRQHandler>:


void TIM4_IRQHandler(){
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
    if (TIM4->SR & TIM_SR_UIF) {
 8000840:	4b4b      	ldr	r3, [pc, #300]	@ (8000970 <TIM4_IRQHandler+0x134>)
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	2b00      	cmp	r3, #0
 800084a:	f000 808c 	beq.w	8000966 <TIM4_IRQHandler+0x12a>

        // Limpa a flag de interrupção de atualização
        TIM4->SR &= ~TIM_SR_UIF;
 800084e:	4b48      	ldr	r3, [pc, #288]	@ (8000970 <TIM4_IRQHandler+0x134>)
 8000850:	691b      	ldr	r3, [r3, #16]
 8000852:	4a47      	ldr	r2, [pc, #284]	@ (8000970 <TIM4_IRQHandler+0x134>)
 8000854:	f023 0301 	bic.w	r3, r3, #1
 8000858:	6113      	str	r3, [r2, #16]

        key++;
 800085a:	4b46      	ldr	r3, [pc, #280]	@ (8000974 <TIM4_IRQHandler+0x138>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	3301      	adds	r3, #1
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b44      	ldr	r3, [pc, #272]	@ (8000974 <TIM4_IRQHandler+0x138>)
 8000864:	701a      	strb	r2, [r3, #0]

		TIM2->CCER &= ~TIM_CCER_CC3E;
 8000866:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800086a:	6a1b      	ldr	r3, [r3, #32]
 800086c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000874:	6213      	str	r3, [r2, #32]
		TIM2->CCER &= ~TIM_CCER_CC4E;
 8000876:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800087a:	6a1b      	ldr	r3, [r3, #32]
 800087c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000880:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000884:	6213      	str	r3, [r2, #32]
		TIM3->CCER &= ~TIM_CCER_CC1E;
 8000886:	4b3c      	ldr	r3, [pc, #240]	@ (8000978 <TIM4_IRQHandler+0x13c>)
 8000888:	6a1b      	ldr	r3, [r3, #32]
 800088a:	4a3b      	ldr	r2, [pc, #236]	@ (8000978 <TIM4_IRQHandler+0x13c>)
 800088c:	f023 0301 	bic.w	r3, r3, #1
 8000890:	6213      	str	r3, [r2, #32]


			        switch(key) {
 8000892:	4b38      	ldr	r3, [pc, #224]	@ (8000974 <TIM4_IRQHandler+0x138>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	3b01      	subs	r3, #1
 8000898:	2b06      	cmp	r3, #6
 800089a:	d860      	bhi.n	800095e <TIM4_IRQHandler+0x122>
 800089c:	a201      	add	r2, pc, #4	@ (adr r2, 80008a4 <TIM4_IRQHandler+0x68>)
 800089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a2:	bf00      	nop
 80008a4:	080008c1 	.word	0x080008c1
 80008a8:	080008d3 	.word	0x080008d3
 80008ac:	080008e5 	.word	0x080008e5
 80008b0:	080008f3 	.word	0x080008f3
 80008b4:	08000905 	.word	0x08000905
 80008b8:	08000923 	.word	0x08000923
 80008bc:	08000941 	.word	0x08000941
			            case 1: // vermelho
			            	TIM2->CCER |= TIM_CCER_CC3E;
 80008c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008c4:	6a1b      	ldr	r3, [r3, #32]
 80008c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ce:	6213      	str	r3, [r2, #32]
			                break;
 80008d0:	e049      	b.n	8000966 <TIM4_IRQHandler+0x12a>
			            case 2: // verde
			            	TIM2->CCER |= TIM_CCER_CC4E;
 80008d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008d6:	6a1b      	ldr	r3, [r3, #32]
 80008d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008e0:	6213      	str	r3, [r2, #32]
			                break;
 80008e2:	e040      	b.n	8000966 <TIM4_IRQHandler+0x12a>
			            case 3: // azul
			            	TIM3->CCER |= TIM_CCER_CC1E;
 80008e4:	4b24      	ldr	r3, [pc, #144]	@ (8000978 <TIM4_IRQHandler+0x13c>)
 80008e6:	6a1b      	ldr	r3, [r3, #32]
 80008e8:	4a23      	ldr	r2, [pc, #140]	@ (8000978 <TIM4_IRQHandler+0x13c>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	6213      	str	r3, [r2, #32]
			                break;
 80008f0:	e039      	b.n	8000966 <TIM4_IRQHandler+0x12a>
			            case 4: // amarelo
			            	TIM2->CCER |= TIM_CCER_CC3E | TIM_CCER_CC4E;
 80008f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008f6:	6a1b      	ldr	r3, [r3, #32]
 80008f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008fc:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8000900:	6213      	str	r3, [r2, #32]
			                break;
 8000902:	e030      	b.n	8000966 <TIM4_IRQHandler+0x12a>
			            case 5: // ciano
			            	TIM2->CCER |= TIM_CCER_CC4E;
 8000904:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000908:	6a1b      	ldr	r3, [r3, #32]
 800090a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800090e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000912:	6213      	str	r3, [r2, #32]
			            	TIM3->CCER |= TIM_CCER_CC1E;
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <TIM4_IRQHandler+0x13c>)
 8000916:	6a1b      	ldr	r3, [r3, #32]
 8000918:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <TIM4_IRQHandler+0x13c>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	6213      	str	r3, [r2, #32]
			                break;
 8000920:	e021      	b.n	8000966 <TIM4_IRQHandler+0x12a>
			            case 6: // roxo
			            	TIM2->CCER |= TIM_CCER_CC3E;
 8000922:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000926:	6a1b      	ldr	r3, [r3, #32]
 8000928:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800092c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000930:	6213      	str	r3, [r2, #32]
			            	TIM3->CCER |= TIM_CCER_CC1E;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <TIM4_IRQHandler+0x13c>)
 8000934:	6a1b      	ldr	r3, [r3, #32]
 8000936:	4a10      	ldr	r2, [pc, #64]	@ (8000978 <TIM4_IRQHandler+0x13c>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6213      	str	r3, [r2, #32]
			                break;
 800093e:	e012      	b.n	8000966 <TIM4_IRQHandler+0x12a>
			            case 7: // branco
			            	TIM2->CCER |= TIM_CCER_CC3E | TIM_CCER_CC4E;
 8000940:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000944:	6a1b      	ldr	r3, [r3, #32]
 8000946:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800094a:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800094e:	6213      	str	r3, [r2, #32]
			            	TIM3->CCER |= TIM_CCER_CC1E;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <TIM4_IRQHandler+0x13c>)
 8000952:	6a1b      	ldr	r3, [r3, #32]
 8000954:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <TIM4_IRQHandler+0x13c>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6213      	str	r3, [r2, #32]
			                break;
 800095c:	e003      	b.n	8000966 <TIM4_IRQHandler+0x12a>
			            default: // Reseta as variáveis
			                key = 0;
 800095e:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <TIM4_IRQHandler+0x138>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
			                break;
 8000964:	bf00      	nop
			        }

    }
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40000800 	.word	0x40000800
 8000974:	20000021 	.word	0x20000021
 8000978:	40000400 	.word	0x40000400

0800097c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800097c:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800097e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000980:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	@ (80009bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	@ (80009c0 <LoopForever+0xe>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	@ (80009c8 <LoopForever+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009aa:	f000 f811 	bl	80009d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ae:	f7ff fbfb 	bl	80001a8 <main>

080009b2 <LoopForever>:

LoopForever:
  b LoopForever
 80009b2:	e7fe      	b.n	80009b2 <LoopForever>
  ldr   r0, =_estack
 80009b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80009c0:	08000b44 	.word	0x08000b44
  ldr r2, =_sbss
 80009c4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80009c8:	2000002c 	.word	0x2000002c

080009cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_2_IRQHandler>
	...

080009d0 <__libc_init_array>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	2600      	movs	r6, #0
 80009d4:	4d0c      	ldr	r5, [pc, #48]	@ (8000a08 <__libc_init_array+0x38>)
 80009d6:	4c0d      	ldr	r4, [pc, #52]	@ (8000a0c <__libc_init_array+0x3c>)
 80009d8:	1b64      	subs	r4, r4, r5
 80009da:	10a4      	asrs	r4, r4, #2
 80009dc:	42a6      	cmp	r6, r4
 80009de:	d109      	bne.n	80009f4 <__libc_init_array+0x24>
 80009e0:	f000 f81a 	bl	8000a18 <_init>
 80009e4:	2600      	movs	r6, #0
 80009e6:	4d0a      	ldr	r5, [pc, #40]	@ (8000a10 <__libc_init_array+0x40>)
 80009e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a14 <__libc_init_array+0x44>)
 80009ea:	1b64      	subs	r4, r4, r5
 80009ec:	10a4      	asrs	r4, r4, #2
 80009ee:	42a6      	cmp	r6, r4
 80009f0:	d105      	bne.n	80009fe <__libc_init_array+0x2e>
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f8:	4798      	blx	r3
 80009fa:	3601      	adds	r6, #1
 80009fc:	e7ee      	b.n	80009dc <__libc_init_array+0xc>
 80009fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a02:	4798      	blx	r3
 8000a04:	3601      	adds	r6, #1
 8000a06:	e7f2      	b.n	80009ee <__libc_init_array+0x1e>
 8000a08:	08000b3c 	.word	0x08000b3c
 8000a0c:	08000b3c 	.word	0x08000b3c
 8000a10:	08000b3c 	.word	0x08000b3c
 8000a14:	08000b40 	.word	0x08000b40

08000a18 <_init>:
 8000a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a1a:	bf00      	nop
 8000a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a1e:	bc08      	pop	{r3}
 8000a20:	469e      	mov	lr, r3
 8000a22:	4770      	bx	lr

08000a24 <_fini>:
 8000a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a26:	bf00      	nop
 8000a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a2a:	bc08      	pop	{r3}
 8000a2c:	469e      	mov	lr, r3
 8000a2e:	4770      	bx	lr
