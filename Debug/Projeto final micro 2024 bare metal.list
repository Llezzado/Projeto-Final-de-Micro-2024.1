
Projeto final micro 2024 bare metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d5c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08000e8c  08000e8c  00001e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001070  08001070  00002078  2**0
                  CONTENTS
  4 .ARM          00000000  08001070  08001070  00002078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001070  08001078  00002078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001070  08001070  00002070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001074  08001074  00002074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00002078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  08001078  00003000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08001078  00003038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d05  00000000  00000000  000020a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002c1  00000000  00000000  00002da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00003068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ea  00000000  00000000  000031a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000000f8  00000000  00000000  0000328a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d29  00000000  00000000  00003382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054af5  00000000  00000000  000040ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00058ba0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000046c  00000000  00000000  00058be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00059050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e74 	.word	0x08000e74

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e74 	.word	0x08000e74

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <main>:
void debug();



int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0

	uint8_t HumidadeI = 0, HumidadeD = 0, TemperaturaI = 0, TemperaturaD = 0;
 80001ae:	2300      	movs	r3, #0
 80001b0:	71fb      	strb	r3, [r7, #7]
 80001b2:	2300      	movs	r3, #0
 80001b4:	71bb      	strb	r3, [r7, #6]
 80001b6:	2300      	movs	r3, #0
 80001b8:	717b      	strb	r3, [r7, #5]
 80001ba:	2300      	movs	r3, #0
 80001bc:	713b      	strb	r3, [r7, #4]

	RCC_setup();
 80001be:	f000 f8a3 	bl	8000308 <RCC_setup>

	USART1_setup();
 80001c2:	f000 f8ff 	bl	80003c4 <USART1_setup>
	uart_write("usart set\n\r");
 80001c6:	482e      	ldr	r0, [pc, #184]	@ (8000280 <main+0xd8>)
 80001c8:	f000 f944 	bl	8000454 <uart_write>

	debug();
 80001cc:	f000 f866 	bl	800029c <debug>
	uart_write("debug set\n\r");
 80001d0:	482c      	ldr	r0, [pc, #176]	@ (8000284 <main+0xdc>)
 80001d2:	f000 f93f 	bl	8000454 <uart_write>

	TIM2_setup();
 80001d6:	f000 fa41 	bl	800065c <TIM2_setup>
	uart_write("tim2 set\n\r");
 80001da:	482b      	ldr	r0, [pc, #172]	@ (8000288 <main+0xe0>)
 80001dc:	f000 f93a 	bl	8000454 <uart_write>

	dht11_setup();
 80001e0:	f000 fac2 	bl	8000768 <dht11_setup>
	uart_write("dht11 set\n\r");
 80001e4:	4829      	ldr	r0, [pc, #164]	@ (800028c <main+0xe4>)
 80001e6:	f000 f935 	bl	8000454 <uart_write>

    I2C1_setup();
 80001ea:	f000 fb6b 	bl	80008c4 <I2C1_setup>
    uart_write("I2C set\n\r");
 80001ee:	4828      	ldr	r0, [pc, #160]	@ (8000290 <main+0xe8>)
 80001f0:	f000 f930 	bl	8000454 <uart_write>

    OLED_init();
 80001f4:	f000 fc0c 	bl	8000a10 <OLED_init>
    uart_write("I2C init\n\r");
 80001f8:	4826      	ldr	r0, [pc, #152]	@ (8000294 <main+0xec>)
 80001fa:	f000 f92b 	bl	8000454 <uart_write>

    OLED_send_command(0xAF); // Comando para ligar o OLED (Display ON)
 80001fe:	20af      	movs	r0, #175	@ 0xaf
 8000200:	f000 fbd8 	bl	80009b4 <OLED_send_command>

    Oled_intro();
 8000204:	f000 fcfe 	bl	8000c04 <Oled_intro>


	while(1)
	{
		TIM2_delay_ms(1000);
 8000208:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800020c:	f000 fa46 	bl	800069c <TIM2_delay_ms>
		GPIOC->ODR ^= (1 << 13);
 8000210:	4b21      	ldr	r3, [pc, #132]	@ (8000298 <main+0xf0>)
 8000212:	68db      	ldr	r3, [r3, #12]
 8000214:	4a20      	ldr	r2, [pc, #128]	@ (8000298 <main+0xf0>)
 8000216:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800021a:	60d3      	str	r3, [r2, #12]
		if(dht11_ping()){
 800021c:	f000 fae0 	bl	80007e0 <dht11_ping>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d0f0      	beq.n	8000208 <main+0x60>


			TemperaturaI = dht11_read();
 8000226:	f000 fb15 	bl	8000854 <dht11_read>
 800022a:	4603      	mov	r3, r0
 800022c:	717b      	strb	r3, [r7, #5]
			TemperaturaD = dht11_read();
 800022e:	f000 fb11 	bl	8000854 <dht11_read>
 8000232:	4603      	mov	r3, r0
 8000234:	713b      	strb	r3, [r7, #4]

			HumidadeI = dht11_read();
 8000236:	f000 fb0d 	bl	8000854 <dht11_read>
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
			HumidadeD = dht11_read();
 800023e:	f000 fb09 	bl	8000854 <dht11_read>
 8000242:	4603      	mov	r3, r0
 8000244:	71bb      	strb	r3, [r7, #6]

			uart_info_dht11(TemperaturaI,TemperaturaD,HumidadeI,HumidadeD);
 8000246:	79bb      	ldrb	r3, [r7, #6]
 8000248:	79fa      	ldrb	r2, [r7, #7]
 800024a:	7939      	ldrb	r1, [r7, #4]
 800024c:	7978      	ldrb	r0, [r7, #5]
 800024e:	f000 f921 	bl	8000494 <uart_info_dht11>
			OLED_info_dht11(TemperaturaI,TemperaturaD,HumidadeI,HumidadeD);
 8000252:	79bb      	ldrb	r3, [r7, #6]
 8000254:	79fa      	ldrb	r2, [r7, #7]
 8000256:	7939      	ldrb	r1, [r7, #4]
 8000258:	7978      	ldrb	r0, [r7, #5]
 800025a:	f000 fced 	bl	8000c38 <OLED_info_dht11>


			GPIOC->ODR ^= (1 << 13);
 800025e:	4b0e      	ldr	r3, [pc, #56]	@ (8000298 <main+0xf0>)
 8000260:	68db      	ldr	r3, [r3, #12]
 8000262:	4a0d      	ldr	r2, [pc, #52]	@ (8000298 <main+0xf0>)
 8000264:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000268:	60d3      	str	r3, [r2, #12]
			TIM2_delay_ms(1000);
 800026a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800026e:	f000 fa15 	bl	800069c <TIM2_delay_ms>
			GPIOC->ODR ^= (1 << 13);
 8000272:	4b09      	ldr	r3, [pc, #36]	@ (8000298 <main+0xf0>)
 8000274:	68db      	ldr	r3, [r3, #12]
 8000276:	4a08      	ldr	r2, [pc, #32]	@ (8000298 <main+0xf0>)
 8000278:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800027c:	60d3      	str	r3, [r2, #12]
		TIM2_delay_ms(1000);
 800027e:	e7c3      	b.n	8000208 <main+0x60>
 8000280:	08000e8c 	.word	0x08000e8c
 8000284:	08000e98 	.word	0x08000e98
 8000288:	08000ea4 	.word	0x08000ea4
 800028c:	08000eb0 	.word	0x08000eb0
 8000290:	08000ebc 	.word	0x08000ebc
 8000294:	08000ec8 	.word	0x08000ec8
 8000298:	40011000 	.word	0x40011000

0800029c <debug>:


	}
}

void debug(){
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	// Set Bit 3 to enable GPIOB clock
	RCC->APB2ENR |= (1 << 3);
 80002a0:	4b16      	ldr	r3, [pc, #88]	@ (80002fc <debug+0x60>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a15      	ldr	r2, [pc, #84]	@ (80002fc <debug+0x60>)
 80002a6:	f043 0308 	orr.w	r3, r3, #8
 80002aa:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= (1 << 4);
 80002ac:	4b13      	ldr	r3, [pc, #76]	@ (80002fc <debug+0x60>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a12      	ldr	r2, [pc, #72]	@ (80002fc <debug+0x60>)
 80002b2:	f043 0310 	orr.w	r3, r3, #16
 80002b6:	6193      	str	r3, [r2, #24]


	GPIOC->CRH &= 0xFF0FFFFF;
 80002b8:	4b11      	ldr	r3, [pc, #68]	@ (8000300 <debug+0x64>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	4a10      	ldr	r2, [pc, #64]	@ (8000300 <debug+0x64>)
 80002be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80002c2:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= 0x00200000;
 80002c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000300 <debug+0x64>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000300 <debug+0x64>)
 80002ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002ce:	6053      	str	r3, [r2, #4]
	// Make GPIOB Pin11 output
	GPIOB->CRH &= 0xFFFF0FFF;
 80002d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <debug+0x68>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000304 <debug+0x68>)
 80002d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80002da:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= 0x00002000;
 80002dc:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <debug+0x68>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4a08      	ldr	r2, [pc, #32]	@ (8000304 <debug+0x68>)
 80002e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002e6:	6053      	str	r3, [r2, #4]

	// Reset GPIOB Pin11
	GPIOB->ODR |= (1 << 11);
 80002e8:	4b06      	ldr	r3, [pc, #24]	@ (8000304 <debug+0x68>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	4a05      	ldr	r2, [pc, #20]	@ (8000304 <debug+0x68>)
 80002ee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80002f2:	60d3      	str	r3, [r2, #12]
	//GPIOC->ODR |= (1 << 13);
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	40021000 	.word	0x40021000
 8000300:	40011000 	.word	0x40011000
 8000304:	40010c00 	.word	0x40010c00

08000308 <RCC_setup>:

void RCC_setup(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
    // Habilitar o HSE (High-Speed External Clock)
    RCC->CR |= RCC_CR_HSEON;  // Liga o HSE
 800030c:	4b2b      	ldr	r3, [pc, #172]	@ (80003bc <RCC_setup+0xb4>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a2a      	ldr	r2, [pc, #168]	@ (80003bc <RCC_setup+0xb4>)
 8000312:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000316:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));  // Aguarda até que o HSE esteja pronto
 8000318:	bf00      	nop
 800031a:	4b28      	ldr	r3, [pc, #160]	@ (80003bc <RCC_setup+0xb4>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000322:	2b00      	cmp	r3, #0
 8000324:	d0f9      	beq.n	800031a <RCC_setup+0x12>

    // Configurar o PLL para usar o HSE como fonte e multiplicar por 9
    RCC->CFGR &= ~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL); // Limpar as configurações de PLL
 8000326:	4b25      	ldr	r3, [pc, #148]	@ (80003bc <RCC_setup+0xb4>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	4a24      	ldr	r2, [pc, #144]	@ (80003bc <RCC_setup+0xb4>)
 800032c:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 8000330:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= ( (1 << 16) | RCC_CFGR_PLLMULL9); // Configurar PLL com HSE e multiplicação por 9
 8000332:	4b22      	ldr	r3, [pc, #136]	@ (80003bc <RCC_setup+0xb4>)
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	4a21      	ldr	r2, [pc, #132]	@ (80003bc <RCC_setup+0xb4>)
 8000338:	f443 13e8 	orr.w	r3, r3, #1900544	@ 0x1d0000
 800033c:	6053      	str	r3, [r2, #4]

    // Ligar o PLL
    RCC->CR |= RCC_CR_PLLON;  // Habilitar o PLL
 800033e:	4b1f      	ldr	r3, [pc, #124]	@ (80003bc <RCC_setup+0xb4>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a1e      	ldr	r2, [pc, #120]	@ (80003bc <RCC_setup+0xb4>)
 8000344:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000348:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));  // Esperar o PLL ficar pronto
 800034a:	bf00      	nop
 800034c:	4b1b      	ldr	r3, [pc, #108]	@ (80003bc <RCC_setup+0xb4>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000354:	2b00      	cmp	r3, #0
 8000356:	d0f9      	beq.n	800034c <RCC_setup+0x44>

    // Configurar os divisores AHB, APB1 e APB2
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;   // Sem divisão para o AHB (HCLK = SYSCLK)
 8000358:	4b18      	ldr	r3, [pc, #96]	@ (80003bc <RCC_setup+0xb4>)
 800035a:	4a18      	ldr	r2, [pc, #96]	@ (80003bc <RCC_setup+0xb4>)
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;  // Divisor 2 para APB1 (PCLK1 = HCLK/2)
 8000360:	4b16      	ldr	r3, [pc, #88]	@ (80003bc <RCC_setup+0xb4>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	4a15      	ldr	r2, [pc, #84]	@ (80003bc <RCC_setup+0xb4>)
 8000366:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800036a:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;  // Sem divisão para APB2 (PCLK2 = HCLK)
 800036c:	4b13      	ldr	r3, [pc, #76]	@ (80003bc <RCC_setup+0xb4>)
 800036e:	4a13      	ldr	r2, [pc, #76]	@ (80003bc <RCC_setup+0xb4>)
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	6053      	str	r3, [r2, #4]

    // Configurar o Flash latency
    FLASH->ACR |= FLASH_ACR_LATENCY_2;  // 2 ciclos de espera para 72 MHz
 8000374:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <RCC_setup+0xb8>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a11      	ldr	r2, [pc, #68]	@ (80003c0 <RCC_setup+0xb8>)
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	6013      	str	r3, [r2, #0]

    // Selecionar o PLL como a fonte do SYSCLK
    RCC->CFGR &= ~RCC_CFGR_SW;  // Limpar bits de seleção do SYSCLK
 8000380:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <RCC_setup+0xb4>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	4a0d      	ldr	r2, [pc, #52]	@ (80003bc <RCC_setup+0xb4>)
 8000386:	f023 0303 	bic.w	r3, r3, #3
 800038a:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_SW_PLL;  // Selecionar o PLL como a fonte de clock
 800038c:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <RCC_setup+0xb4>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	4a0a      	ldr	r2, [pc, #40]	@ (80003bc <RCC_setup+0xb4>)
 8000392:	f043 0302 	orr.w	r3, r3, #2
 8000396:	6053      	str	r3, [r2, #4]

    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);  // Esperar a transição para PLL
 8000398:	bf00      	nop
 800039a:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <RCC_setup+0xb4>)
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	f003 030c 	and.w	r3, r3, #12
 80003a2:	2b08      	cmp	r3, #8
 80003a4:	d1f9      	bne.n	800039a <RCC_setup+0x92>

    // Desabilitar o HSI (opcional, se não for mais usado)
    RCC->CR &= ~RCC_CR_HSION;
 80003a6:	4b05      	ldr	r3, [pc, #20]	@ (80003bc <RCC_setup+0xb4>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a04      	ldr	r2, [pc, #16]	@ (80003bc <RCC_setup+0xb4>)
 80003ac:	f023 0301 	bic.w	r3, r3, #1
 80003b0:	6013      	str	r3, [r2, #0]
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40022000 	.word	0x40022000

080003c4 <USART1_setup>:


void USART1_setup(){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0

	/*UART1 Pin configuration*/
	//enable clock access to GPIOA
	RCC->APB2ENR|=RCC_APB2ENR_IOPAEN;
 80003c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000448 <USART1_setup+0x84>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a1e      	ldr	r2, [pc, #120]	@ (8000448 <USART1_setup+0x84>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6193      	str	r3, [r2, #24]

	/*Configure PA9(TX) as output maximum speed to 50MHz
	 * and alternate output push-pull mode for USART1*/
	GPIOA->CRH &= 0xFFFFFF0F;
 80003d4:	4b1d      	ldr	r3, [pc, #116]	@ (800044c <USART1_setup+0x88>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	4a1c      	ldr	r2, [pc, #112]	@ (800044c <USART1_setup+0x88>)
 80003da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80003de:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x000000B0;
 80003e0:	4b1a      	ldr	r3, [pc, #104]	@ (800044c <USART1_setup+0x88>)
 80003e2:	685b      	ldr	r3, [r3, #4]
 80003e4:	4a19      	ldr	r2, [pc, #100]	@ (800044c <USART1_setup+0x88>)
 80003e6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80003ea:	6053      	str	r3, [r2, #4]

	//Configure PA10(RX) as as input floating as following
	GPIOA->CRH &= 0xFFFFF0FF;
 80003ec:	4b17      	ldr	r3, [pc, #92]	@ (800044c <USART1_setup+0x88>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	4a16      	ldr	r2, [pc, #88]	@ (800044c <USART1_setup+0x88>)
 80003f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80003f6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x00000400;
 80003f8:	4b14      	ldr	r3, [pc, #80]	@ (800044c <USART1_setup+0x88>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	4a13      	ldr	r2, [pc, #76]	@ (800044c <USART1_setup+0x88>)
 80003fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000402:	6053      	str	r3, [r2, #4]

	/*USART1 configuration*/

	//enable clock access to USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000404:	4b10      	ldr	r3, [pc, #64]	@ (8000448 <USART1_setup+0x84>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a0f      	ldr	r2, [pc, #60]	@ (8000448 <USART1_setup+0x84>)
 800040a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800040e:	6193      	str	r3, [r2, #24]
	//Enable receiver
	USART1->CR1 |= USART_CR1_RE | USART_CR1_TE;
 8000410:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <USART1_setup+0x8c>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	4a0e      	ldr	r2, [pc, #56]	@ (8000450 <USART1_setup+0x8c>)
 8000416:	f043 030c 	orr.w	r3, r3, #12
 800041a:	60d3      	str	r3, [r2, #12]
	//Set Baud Rate
	USART1->BRR = ((CPU_CLK_72m + (BaudRate/2U))/BaudRate);
 800041c:	4b0c      	ldr	r3, [pc, #48]	@ (8000450 <USART1_setup+0x8c>)
 800041e:	f240 2271 	movw	r2, #625	@ 0x271
 8000422:	609a      	str	r2, [r3, #8]
	//Enable RXNIE interrupt
	USART1->CR1|=USART_CR1_RXNEIE;
 8000424:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <USART1_setup+0x8c>)
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	4a09      	ldr	r2, [pc, #36]	@ (8000450 <USART1_setup+0x8c>)
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	60d3      	str	r3, [r2, #12]
	//Enable USART1 interrupt in NVIC
	NVIC_EnableIRQ(USART1_IRQn);
 8000430:	2025      	movs	r0, #37	@ 0x25
 8000432:	f7ff fe9d 	bl	8000170 <__NVIC_EnableIRQ>
	//Enable UART
	USART1->CR1 |= USART_CR1_UE;
 8000436:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <USART1_setup+0x8c>)
 8000438:	68db      	ldr	r3, [r3, #12]
 800043a:	4a05      	ldr	r2, [pc, #20]	@ (8000450 <USART1_setup+0x8c>)
 800043c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000440:	60d3      	str	r3, [r2, #12]
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40021000 	.word	0x40021000
 800044c:	40010800 	.word	0x40010800
 8000450:	40013800 	.word	0x40013800

08000454 <uart_write>:

void uart_write(char *ch)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	while(*ch)
 800045c:	e00d      	b.n	800047a <uart_write+0x26>
	{
		//Make sure the transmit data register is empty
		while(!(USART1->SR & USART_SR_TXE)){}
 800045e:	bf00      	nop
 8000460:	4b0b      	ldr	r3, [pc, #44]	@ (8000490 <uart_write+0x3c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000468:	2b00      	cmp	r3, #0
 800046a:	d0f9      	beq.n	8000460 <uart_write+0xc>
		//Write to transmit data register
		USART1->DR	=  (*ch & 0xFF);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	781a      	ldrb	r2, [r3, #0]
 8000470:	4b07      	ldr	r3, [pc, #28]	@ (8000490 <uart_write+0x3c>)
 8000472:	605a      	str	r2, [r3, #4]
		ch++;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3301      	adds	r3, #1
 8000478:	607b      	str	r3, [r7, #4]
	while(*ch)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d1ed      	bne.n	800045e <uart_write+0xa>
	}
}
 8000482:	bf00      	nop
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	40013800 	.word	0x40013800

08000494 <uart_info_dht11>:

void uart_info_dht11(uint8_t HI, uint8_t HD, uint8_t TI, uint8_t TD){
 8000494:	b590      	push	{r4, r7, lr}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4604      	mov	r4, r0
 800049c:	4608      	mov	r0, r1
 800049e:	4611      	mov	r1, r2
 80004a0:	461a      	mov	r2, r3
 80004a2:	4623      	mov	r3, r4
 80004a4:	71fb      	strb	r3, [r7, #7]
 80004a6:	4603      	mov	r3, r0
 80004a8:	71bb      	strb	r3, [r7, #6]
 80004aa:	460b      	mov	r3, r1
 80004ac:	717b      	strb	r3, [r7, #5]
 80004ae:	4613      	mov	r3, r2
 80004b0:	713b      	strb	r3, [r7, #4]

    int_to_string(TI,buffer);
 80004b2:	797b      	ldrb	r3, [r7, #5]
 80004b4:	4917      	ldr	r1, [pc, #92]	@ (8000514 <uart_info_dht11+0x80>)
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f834 	bl	8000524 <int_to_string>
    uart_write(buffer);
 80004bc:	4815      	ldr	r0, [pc, #84]	@ (8000514 <uart_info_dht11+0x80>)
 80004be:	f7ff ffc9 	bl	8000454 <uart_write>
    uart_write(",");
 80004c2:	4815      	ldr	r0, [pc, #84]	@ (8000518 <uart_info_dht11+0x84>)
 80004c4:	f7ff ffc6 	bl	8000454 <uart_write>
    int_to_string(TD,buffer);
 80004c8:	793b      	ldrb	r3, [r7, #4]
 80004ca:	4912      	ldr	r1, [pc, #72]	@ (8000514 <uart_info_dht11+0x80>)
 80004cc:	4618      	mov	r0, r3
 80004ce:	f000 f829 	bl	8000524 <int_to_string>
    uart_write(buffer);
 80004d2:	4810      	ldr	r0, [pc, #64]	@ (8000514 <uart_info_dht11+0x80>)
 80004d4:	f7ff ffbe 	bl	8000454 <uart_write>
    uart_write(" C\n\r");
 80004d8:	4810      	ldr	r0, [pc, #64]	@ (800051c <uart_info_dht11+0x88>)
 80004da:	f7ff ffbb 	bl	8000454 <uart_write>

    int_to_string(HI,buffer);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	490c      	ldr	r1, [pc, #48]	@ (8000514 <uart_info_dht11+0x80>)
 80004e2:	4618      	mov	r0, r3
 80004e4:	f000 f81e 	bl	8000524 <int_to_string>
    uart_write(buffer);
 80004e8:	480a      	ldr	r0, [pc, #40]	@ (8000514 <uart_info_dht11+0x80>)
 80004ea:	f7ff ffb3 	bl	8000454 <uart_write>
    uart_write(",");
 80004ee:	480a      	ldr	r0, [pc, #40]	@ (8000518 <uart_info_dht11+0x84>)
 80004f0:	f7ff ffb0 	bl	8000454 <uart_write>
    int_to_string(HD,buffer);
 80004f4:	79bb      	ldrb	r3, [r7, #6]
 80004f6:	4907      	ldr	r1, [pc, #28]	@ (8000514 <uart_info_dht11+0x80>)
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f813 	bl	8000524 <int_to_string>
    uart_write(buffer);
 80004fe:	4805      	ldr	r0, [pc, #20]	@ (8000514 <uart_info_dht11+0x80>)
 8000500:	f7ff ffa8 	bl	8000454 <uart_write>
    uart_write(" %\n\r");
 8000504:	4806      	ldr	r0, [pc, #24]	@ (8000520 <uart_info_dht11+0x8c>)
 8000506:	f7ff ffa5 	bl	8000454 <uart_write>

}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	bd90      	pop	{r4, r7, pc}
 8000512:	bf00      	nop
 8000514:	20000020 	.word	0x20000020
 8000518:	08000ed4 	.word	0x08000ed4
 800051c:	08000ed8 	.word	0x08000ed8
 8000520:	08000ee0 	.word	0x08000ee0

08000524 <int_to_string>:

void int_to_string(uint8_t value, char *str) {
 8000524:	b480      	push	{r7}
 8000526:	b087      	sub	sp, #28
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	6039      	str	r1, [r7, #0]
 800052e:	71fb      	strb	r3, [r7, #7]
    int i = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]

    // Processa cada dígito e coloca no array
    do {
        str[i++] = (value % 10) + '0';  // Extrai o último dígito e converte para char
 8000534:	79fa      	ldrb	r2, [r7, #7]
 8000536:	4b26      	ldr	r3, [pc, #152]	@ (80005d0 <int_to_string+0xac>)
 8000538:	fba3 1302 	umull	r1, r3, r3, r2
 800053c:	08d9      	lsrs	r1, r3, #3
 800053e:	460b      	mov	r3, r1
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	440b      	add	r3, r1
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	b2da      	uxtb	r2, r3
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	1c59      	adds	r1, r3, #1
 800054e:	6179      	str	r1, [r7, #20]
 8000550:	4619      	mov	r1, r3
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	440b      	add	r3, r1
 8000556:	3230      	adds	r2, #48	@ 0x30
 8000558:	b2d2      	uxtb	r2, r2
 800055a:	701a      	strb	r2, [r3, #0]
        value /= 10;                    // Remove o dígito processado
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	4a1c      	ldr	r2, [pc, #112]	@ (80005d0 <int_to_string+0xac>)
 8000560:	fba2 2303 	umull	r2, r3, r2, r3
 8000564:	08db      	lsrs	r3, r3, #3
 8000566:	71fb      	strb	r3, [r7, #7]
    } while (value > 0);
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d1e2      	bne.n	8000534 <int_to_string+0x10>

    // Adiciona o terminador nulo
    str[i] = '\0';
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	683a      	ldr	r2, [r7, #0]
 8000572:	4413      	add	r3, r2
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]

    // Inverte a string, já que os dígitos foram colocados em ordem inversa
    for (int j = 0; j < i / 2; j++) {
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	e01a      	b.n	80005b4 <int_to_string+0x90>
        char temp = str[j];
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	4413      	add	r3, r2
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	73fb      	strb	r3, [r7, #15]
        str[j] = str[i - j - 1];
 8000588:	697a      	ldr	r2, [r7, #20]
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	3b01      	subs	r3, #1
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	441a      	add	r2, r3
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	6839      	ldr	r1, [r7, #0]
 8000598:	440b      	add	r3, r1
 800059a:	7812      	ldrb	r2, [r2, #0]
 800059c:	701a      	strb	r2, [r3, #0]
        str[i - j - 1] = temp;
 800059e:	697a      	ldr	r2, [r7, #20]
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	1ad3      	subs	r3, r2, r3
 80005a4:	3b01      	subs	r3, #1
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	4413      	add	r3, r2
 80005aa:	7bfa      	ldrb	r2, [r7, #15]
 80005ac:	701a      	strb	r2, [r3, #0]
    for (int j = 0; j < i / 2; j++) {
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	3301      	adds	r3, #1
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	0fda      	lsrs	r2, r3, #31
 80005b8:	4413      	add	r3, r2
 80005ba:	105b      	asrs	r3, r3, #1
 80005bc:	461a      	mov	r2, r3
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	4293      	cmp	r3, r2
 80005c2:	dbdc      	blt.n	800057e <int_to_string+0x5a>
    }
}
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	371c      	adds	r7, #28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	cccccccd 	.word	0xcccccccd

080005d4 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
    /* Verifica a origem da interrupção */
    if (USART1->SR & USART_SR_RXNE) /* Recebeu um caractere */
 80005d8:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <USART1_IRQHandler+0x78>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f003 0320 	and.w	r3, r3, #32
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d031      	beq.n	8000648 <USART1_IRQHandler+0x74>
    {
        /* Lê o dado */
        ch = USART1->DR;
 80005e4:	4b19      	ldr	r3, [pc, #100]	@ (800064c <USART1_IRQHandler+0x78>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <USART1_IRQHandler+0x7c>)
 80005ec:	701a      	strb	r2, [r3, #0]
        uart_write(&ch);
 80005ee:	4818      	ldr	r0, [pc, #96]	@ (8000650 <USART1_IRQHandler+0x7c>)
 80005f0:	f7ff ff30 	bl	8000454 <uart_write>
        // Armazena o caractere no buffer
        if (buffer_index < sizeof(buffer) - 1)  // Certifica-se de não ultrapassar o tamanho do buffer
 80005f4:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <USART1_IRQHandler+0x80>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b12      	cmp	r3, #18
 80005fa:	d822      	bhi.n	8000642 <USART1_IRQHandler+0x6e>
        {
            buffer[buffer_index++] = ch;
 80005fc:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <USART1_IRQHandler+0x80>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	1c5a      	adds	r2, r3, #1
 8000602:	b2d1      	uxtb	r1, r2
 8000604:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <USART1_IRQHandler+0x80>)
 8000606:	7011      	strb	r1, [r2, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <USART1_IRQHandler+0x7c>)
 800060c:	7819      	ldrb	r1, [r3, #0]
 800060e:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <USART1_IRQHandler+0x84>)
 8000610:	5499      	strb	r1, [r3, r2]

            // Verifica se o caractere recebido é o fim da string (ex: '\n' ou '\r')
            if (ch == '\n' || ch == '\r')
 8000612:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <USART1_IRQHandler+0x7c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b0a      	cmp	r3, #10
 8000618:	d003      	beq.n	8000622 <USART1_IRQHandler+0x4e>
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <USART1_IRQHandler+0x7c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b0d      	cmp	r3, #13
 8000620:	d112      	bne.n	8000648 <USART1_IRQHandler+0x74>
            {
                buffer[buffer_index - 1] = '\0';  // Substitui o terminador por NULL para formar a string
 8000622:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <USART1_IRQHandler+0x80>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3b01      	subs	r3, #1
 8000628:	4a0b      	ldr	r2, [pc, #44]	@ (8000658 <USART1_IRQHandler+0x84>)
 800062a:	2100      	movs	r1, #0
 800062c:	54d1      	strb	r1, [r2, r3]

                ch = '\n';
 800062e:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <USART1_IRQHandler+0x7c>)
 8000630:	220a      	movs	r2, #10
 8000632:	701a      	strb	r2, [r3, #0]
                uart_write(&ch);
 8000634:	4806      	ldr	r0, [pc, #24]	@ (8000650 <USART1_IRQHandler+0x7c>)
 8000636:	f7ff ff0d 	bl	8000454 <uart_write>


                buffer_index = 0;  // Reseta o índice para a próxima string
 800063a:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <USART1_IRQHandler+0x80>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
            // Buffer cheio, reiniciar para evitar estouro
            buffer_index = 0;
        }

    }
}
 8000640:	e002      	b.n	8000648 <USART1_IRQHandler+0x74>
            buffer_index = 0;
 8000642:	4b04      	ldr	r3, [pc, #16]	@ (8000654 <USART1_IRQHandler+0x80>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40013800 	.word	0x40013800
 8000650:	2000001c 	.word	0x2000001c
 8000654:	20000034 	.word	0x20000034
 8000658:	20000020 	.word	0x20000020

0800065c <TIM2_setup>:

void TIM2_setup(){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

	// Enable clock access to timer2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000660:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <TIM2_setup+0x3c>)
 8000662:	69db      	ldr	r3, [r3, #28]
 8000664:	4a0c      	ldr	r2, [pc, #48]	@ (8000698 <TIM2_setup+0x3c>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	61d3      	str	r3, [r2, #28]

	// Configure timer2
	TIM2->PSC = tim2_psc - 1; 	//8000000/8 =100000 i.e. 1us
 800066c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000670:	2247      	movs	r2, #71	@ 0x47
 8000672:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 1 - 1 ;
 8000674:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000678:	2200      	movs	r2, #0
 800067a:	62da      	str	r2, [r3, #44]	@ 0x2c


	/* Set UIE(Update interrupt enable) bit
	 * in TIMx DMA/Interrupt enable register (TIMx_DIER)
	 * to enable timer interrupt*/
	TIM2->DIER |= TIM_DIER_UIE;
 800067c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	60d3      	str	r3, [r2, #12]

	// Enable timer2 interrupt in NVIC
	NVIC_EnableIRQ(TIM2_IRQn);
 800068c:	201c      	movs	r0, #28
 800068e:	f7ff fd6f 	bl	8000170 <__NVIC_EnableIRQ>


}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000

0800069c <TIM2_delay_ms>:

void TIM2_delay_ms(uint32_t ms){
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

	while(ms--){
 80006a4:	e003      	b.n	80006ae <TIM2_delay_ms+0x12>
		TIM2_delay_us(1000);
 80006a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006aa:	f000 f80b 	bl	80006c4 <TIM2_delay_us>
	while(ms--){
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	1e5a      	subs	r2, r3, #1
 80006b2:	607a      	str	r2, [r7, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1f6      	bne.n	80006a6 <TIM2_delay_ms+0xa>

	};

}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <TIM2_delay_us>:

void TIM2_delay_us(uint32_t us){
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

	// Disable the timer
	TIM2->CR1 &= ~TIM_CR1_CEN;
 80006cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006d6:	f023 0301 	bic.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

	TIM2->ARR = us -1;
 80006dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

	// Enable the timer
	TIM2->CR1 |= TIM_CR1_CEN;
 80006e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6013      	str	r3, [r2, #0]

	while(!flag);
 80006f6:	bf00      	nop
 80006f8:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <TIM2_delay_us+0x4c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0fb      	beq.n	80006f8 <TIM2_delay_us+0x34>
	flag = 0;
 8000700:	4b03      	ldr	r3, [pc, #12]	@ (8000710 <TIM2_delay_us+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]

}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	20000035 	.word	0x20000035

08000714 <TIM2_IRQHandler>:
}
/*
 * TIM2interrupt handler
 */
void TIM2_IRQHandler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
	if(TIM2->SR & TIM_SR_UIF)
 8000718:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800071c:	691b      	ldr	r3, [r3, #16]
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	2b00      	cmp	r3, #0
 8000724:	d018      	beq.n	8000758 <TIM2_IRQHandler+0x44>
	{
		TIM2->SR &=~TIM_SR_UIF;
 8000726:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800072a:	691b      	ldr	r3, [r3, #16]
 800072c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	6113      	str	r3, [r2, #16]
		flag = 1;
 8000736:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <TIM2_IRQHandler+0x4c>)
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR ^= (1 << 11);
 800073c:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <TIM2_IRQHandler+0x50>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4a08      	ldr	r2, [pc, #32]	@ (8000764 <TIM2_IRQHandler+0x50>)
 8000742:	f483 6300 	eor.w	r3, r3, #2048	@ 0x800
 8000746:	60d3      	str	r3, [r2, #12]

		TIM2->CR1 &= ~TIM_CR1_CEN;
 8000748:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000752:	f023 0301 	bic.w	r3, r3, #1
 8000756:	6013      	str	r3, [r2, #0]

	}

}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	20000035 	.word	0x20000035
 8000764:	40010c00 	.word	0x40010c00

08000768 <dht11_setup>:

void dht11_setup(){
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800076c:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <dht11_setup+0x3c>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a0c      	ldr	r2, [pc, #48]	@ (80007a4 <dht11_setup+0x3c>)
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	6193      	str	r3, [r2, #24]

	DHT11_GRUPO->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 8000778:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <dht11_setup+0x40>)
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <dht11_setup+0x40>)
 800077e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000782:	6053      	str	r3, [r2, #4]
	DHT11_GRUPO->CRH |= GPIO_CRH_MODE9_1;
 8000784:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <dht11_setup+0x40>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	4a07      	ldr	r2, [pc, #28]	@ (80007a8 <dht11_setup+0x40>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	6053      	str	r3, [r2, #4]

    DHT11_GRUPO->ODR &= ~DHT11_PIN;  // Pino em LOW
 8000790:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <dht11_setup+0x40>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	4a04      	ldr	r2, [pc, #16]	@ (80007a8 <dht11_setup+0x40>)
 8000796:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800079a:	60d3      	str	r3, [r2, #12]

}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010c00 	.word	0x40010c00

080007ac <dht11_start>:

void dht11_start(){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

	dht11_setup();
 80007b0:	f7ff ffda 	bl	8000768 <dht11_setup>

	DHT11_GRUPO->ODR &= ~DHT11_PIN;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <dht11_start+0x30>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <dht11_start+0x30>)
 80007ba:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80007be:	60d3      	str	r3, [r2, #12]
	TIM2_delay_ms(18);
 80007c0:	2012      	movs	r0, #18
 80007c2:	f7ff ff6b 	bl	800069c <TIM2_delay_ms>

	DHT11_GRUPO->ODR |= DHT11_PIN;
 80007c6:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <dht11_start+0x30>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <dht11_start+0x30>)
 80007cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007d0:	60d3      	str	r3, [r2, #12]
	TIM2_delay_us(30);
 80007d2:	201e      	movs	r0, #30
 80007d4:	f7ff ff76 	bl	80006c4 <TIM2_delay_us>

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40010c00 	.word	0x40010c00

080007e0 <dht11_ping>:

uint8_t dht11_ping() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

	//uart_write("ping...");
	uart_write("ping test!\n\r");
 80007e6:	4819      	ldr	r0, [pc, #100]	@ (800084c <dht11_ping+0x6c>)
 80007e8:	f7ff fe34 	bl	8000454 <uart_write>
	dht11_start();
 80007ec:	f7ff ffde 	bl	80007ac <dht11_start>


    uint8_t sinal = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	71fb      	strb	r3, [r7, #7]

    DHT11_GRUPO->CRH &= ~(GPIO_CRH_MODE9 | GPIO_CRH_CNF9);
 80007f4:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <dht11_ping+0x70>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	4a15      	ldr	r2, [pc, #84]	@ (8000850 <dht11_ping+0x70>)
 80007fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80007fe:	6053      	str	r3, [r2, #4]
    DHT11_GRUPO->CRH |= GPIO_CRH_CNF9_0; //float input
 8000800:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <dht11_ping+0x70>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	4a12      	ldr	r2, [pc, #72]	@ (8000850 <dht11_ping+0x70>)
 8000806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800080a:	6053      	str	r3, [r2, #4]

    // Esperar o DHT11 puxar o pino para baixo
    TIM2_delay_us(40);
 800080c:	2028      	movs	r0, #40	@ 0x28
 800080e:	f7ff ff59 	bl	80006c4 <TIM2_delay_us>

    if (!(DHT11_GRUPO->IDR & DHT11_PIN)){
 8000812:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <dht11_ping+0x70>)
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800081a:	2b00      	cmp	r3, #0
 800081c:	d10a      	bne.n	8000834 <dht11_ping+0x54>
    	//uart_write("pong!\n\r");
    	TIM2_delay_us(80);
 800081e:	2050      	movs	r0, #80	@ 0x50
 8000820:	f7ff ff50 	bl	80006c4 <TIM2_delay_us>
        if (DHT11_GRUPO->IDR & DHT11_PIN) {
 8000824:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <dht11_ping+0x70>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <dht11_ping+0x54>
            sinal = 1; // DHT11 respondeu
 8000830:	2301      	movs	r3, #1
 8000832:	71fb      	strb	r3, [r7, #7]
            //uart_write("pong!\n\r");
        }
    }

    // Esperar o fim da resposta
    while (DHT11_GRUPO->IDR & DHT11_PIN);
 8000834:	bf00      	nop
 8000836:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <dht11_ping+0x70>)
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f9      	bne.n	8000836 <dht11_ping+0x56>
    //uart_write("\n\r ping encerrado\n\r");
    return sinal;
 8000842:	79fb      	ldrb	r3, [r7, #7]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	08000ee8 	.word	0x08000ee8
 8000850:	40010c00 	.word	0x40010c00

08000854 <dht11_read>:




uint8_t dht11_read(){
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
	uint8_t i, result = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	71bb      	strb	r3, [r7, #6]

    for (i = 0; i < 8; i++) {
 800085e:	2300      	movs	r3, #0
 8000860:	71fb      	strb	r3, [r7, #7]
 8000862:	e025      	b.n	80008b0 <dht11_read+0x5c>

        // Esperar o pino ficar baixo
        while (!(DHT11_GRUPO->IDR & DHT11_PIN));
 8000864:	bf00      	nop
 8000866:	4b16      	ldr	r3, [pc, #88]	@ (80008c0 <dht11_read+0x6c>)
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0f9      	beq.n	8000866 <dht11_read+0x12>

        // Esperar 40 us e verificar o estado do pino
        TIM2_delay_us(40);
 8000872:	2028      	movs	r0, #40	@ 0x28
 8000874:	f7ff ff26 	bl	80006c4 <TIM2_delay_us>
        if (DHT11_GRUPO->IDR & DHT11_PIN) {
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <dht11_read+0x6c>)
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000880:	2b00      	cmp	r3, #0
 8000882:	d00b      	beq.n	800089c <dht11_read+0x48>
            result |= (1 << (7 - i)); // Se o pino estiver alto, é 1
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	f1c3 0307 	rsb	r3, r3, #7
 800088a:	2201      	movs	r2, #1
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	b25a      	sxtb	r2, r3
 8000892:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000896:	4313      	orrs	r3, r2
 8000898:	b25b      	sxtb	r3, r3
 800089a:	71bb      	strb	r3, [r7, #6]
        }

        // Esperar o pino ficar baixo de novo
        while (DHT11_GRUPO->IDR & DHT11_PIN);
 800089c:	bf00      	nop
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <dht11_read+0x6c>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1f9      	bne.n	800089e <dht11_read+0x4a>
    for (i = 0; i < 8; i++) {
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	3301      	adds	r3, #1
 80008ae:	71fb      	strb	r3, [r7, #7]
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2b07      	cmp	r3, #7
 80008b4:	d9d6      	bls.n	8000864 <dht11_read+0x10>
    }

    return result;
 80008b6:	79bb      	ldrb	r3, [r7, #6]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40010c00 	.word	0x40010c00

080008c4 <I2C1_setup>:





void I2C1_setup(void) {
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <I2C1_setup+0x68>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a17      	ldr	r2, [pc, #92]	@ (800092c <I2C1_setup+0x68>)
 80008ce:	f043 0308 	orr.w	r3, r3, #8
 80008d2:	6193      	str	r3, [r2, #24]

    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80008d4:	4b15      	ldr	r3, [pc, #84]	@ (800092c <I2C1_setup+0x68>)
 80008d6:	69db      	ldr	r3, [r3, #28]
 80008d8:	4a14      	ldr	r2, [pc, #80]	@ (800092c <I2C1_setup+0x68>)
 80008da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008de:	61d3      	str	r3, [r2, #28]

    GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6 | GPIO_CRL_MODE7 | GPIO_CRL_CNF7);  // Limpa os bits
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <I2C1_setup+0x6c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a12      	ldr	r2, [pc, #72]	@ (8000930 <I2C1_setup+0x6c>)
 80008e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80008ea:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_CNF6_1 | GPIO_CRL_CNF6_0); // AF open-drain e 10MHz
 80008ec:	4b10      	ldr	r3, [pc, #64]	@ (8000930 <I2C1_setup+0x6c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000930 <I2C1_setup+0x6c>)
 80008f2:	f043 6360 	orr.w	r3, r3, #234881024	@ 0xe000000
 80008f6:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (GPIO_CRL_MODE7_1 | GPIO_CRL_CNF7_1 | GPIO_CRL_CNF7_0); // AF open-drain e 10MHz
 80008f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <I2C1_setup+0x6c>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000930 <I2C1_setup+0x6c>)
 80008fe:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 8000902:	6013      	str	r3, [r2, #0]

    // Configurar o clock I2C1 (APB1 é 36 MHz)
    I2C1->CR2 = 36;  // 36 MHz de clock periférico
 8000904:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <I2C1_setup+0x70>)
 8000906:	2224      	movs	r2, #36	@ 0x24
 8000908:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 180;
 800090a:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <I2C1_setup+0x70>)
 800090c:	22b4      	movs	r2, #180	@ 0xb4
 800090e:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 37;
 8000910:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <I2C1_setup+0x70>)
 8000912:	2225      	movs	r2, #37	@ 0x25
 8000914:	621a      	str	r2, [r3, #32]

    // Habilitar o I2C1
    I2C1->CR1 |= I2C_CR1_PE;
 8000916:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <I2C1_setup+0x70>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a06      	ldr	r2, [pc, #24]	@ (8000934 <I2C1_setup+0x70>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6013      	str	r3, [r2, #0]
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000
 8000930:	40010c00 	.word	0x40010c00
 8000934:	40005400 	.word	0x40005400

08000938 <I2C1_start>:

void I2C1_start(void) {
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

    I2C1->CR1 |= I2C_CR1_START;
 800093c:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <I2C1_start+0x2c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a08      	ldr	r2, [pc, #32]	@ (8000964 <I2C1_start+0x2c>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000946:	6013      	str	r3, [r2, #0]
    //uart_write("I2C start!\n\r");


    while (!(I2C1->SR1 & I2C_SR1_SB));
 8000948:	bf00      	nop
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <I2C1_start+0x2c>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	2b00      	cmp	r3, #0
 8000954:	d0f9      	beq.n	800094a <I2C1_start+0x12>
    (void)I2C1->SR1; // Ler o registro SR1 para limpar o bit SB
 8000956:	4b03      	ldr	r3, [pc, #12]	@ (8000964 <I2C1_start+0x2c>)
 8000958:	695b      	ldr	r3, [r3, #20]

}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40005400 	.word	0x40005400

08000968 <I2C1_stop>:

void I2C1_stop(void) {
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
    // Gerar condição de stop
    I2C1->CR1 |= I2C_CR1_STOP;
 800096c:	4b04      	ldr	r3, [pc, #16]	@ (8000980 <I2C1_stop+0x18>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a03      	ldr	r2, [pc, #12]	@ (8000980 <I2C1_stop+0x18>)
 8000972:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000976:	6013      	str	r3, [r2, #0]
    //uart_write("I2C stop!\n\r");
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	40005400 	.word	0x40005400

08000984 <I2C1_write>:

void I2C1_write(uint8_t data) {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]

    // Escrever o dado no DR
    I2C1->DR = data;
 800098e:	4a08      	ldr	r2, [pc, #32]	@ (80009b0 <I2C1_write+0x2c>)
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	6113      	str	r3, [r2, #16]
    // Esperar até que o dado seja transmitido
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000994:	bf00      	nop
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <I2C1_write+0x2c>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d0f9      	beq.n	8000996 <I2C1_write+0x12>
    //uart_write("I2C - write pong!\n\r");
    (void)I2C1->SR2;
 80009a2:	4b03      	ldr	r3, [pc, #12]	@ (80009b0 <I2C1_write+0x2c>)
 80009a4:	699b      	ldr	r3, [r3, #24]

}
 80009a6:	bf00      	nop
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	40005400 	.word	0x40005400

080009b4 <OLED_send_command>:

void OLED_send_command(uint8_t command) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
    // Iniciar a comunicação I2C
    I2C1_start();
 80009be:	f7ff ffbb 	bl	8000938 <I2C1_start>
    // Enviar o endereço do OLED e o bit de escrita
    //uart_write("I2C escrita start!\n\r");
    I2C1_write(OLED_ADDRESS << 1);
 80009c2:	2078      	movs	r0, #120	@ 0x78
 80009c4:	f7ff ffde 	bl	8000984 <I2C1_write>
    //uart_write("I2C escrita start ok!\n\r");
    // Enviar o byte de controle para indicar que é um comando
    //uart_write("I2C cmd start!\n\r");
    I2C1_write(0x00);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff ffdb 	bl	8000984 <I2C1_write>
    // Enviar o comando
    I2C1_write(command);
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ffd7 	bl	8000984 <I2C1_write>
    // Parar a comunicação I2C
    I2C1_stop();
 80009d6:	f7ff ffc7 	bl	8000968 <I2C1_stop>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <OLED_send_data>:

void OLED_send_data(uint8_t data) {
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	71fb      	strb	r3, [r7, #7]
    // Iniciar a comunicação I2C
    I2C1_start();
 80009ec:	f7ff ffa4 	bl	8000938 <I2C1_start>
    // Enviar o endereço do OLED e o bit de escrita
    I2C1_write(OLED_ADDRESS << 1);
 80009f0:	2078      	movs	r0, #120	@ 0x78
 80009f2:	f7ff ffc7 	bl	8000984 <I2C1_write>
    // Enviar o byte de controle para indicar que é dado
    I2C1_write(0x40);
 80009f6:	2040      	movs	r0, #64	@ 0x40
 80009f8:	f7ff ffc4 	bl	8000984 <I2C1_write>
    // Enviar o dado
    I2C1_write(data);
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ffc0 	bl	8000984 <I2C1_write>
    // Parar a comunicação I2C
    I2C1_stop();
 8000a04:	f7ff ffb0 	bl	8000968 <I2C1_stop>
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <OLED_init>:

void OLED_init(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    // Sequência de inicialização para o SSD1306
    OLED_send_command(0xAE); // Display OFF
 8000a14:	20ae      	movs	r0, #174	@ 0xae
 8000a16:	f7ff ffcd 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0x20); // Set Memory Addressing Mode
 8000a1a:	2020      	movs	r0, #32
 8000a1c:	f7ff ffca 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0x10); // Set Page Addressing Mode
 8000a20:	2010      	movs	r0, #16
 8000a22:	f7ff ffc7 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0xB0); // Set Page Start Address for Page Addressing Mode
 8000a26:	20b0      	movs	r0, #176	@ 0xb0
 8000a28:	f7ff ffc4 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0xC8); // Set COM Output Scan Direction
 8000a2c:	20c8      	movs	r0, #200	@ 0xc8
 8000a2e:	f7ff ffc1 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0x00); // Set low column address
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff ffbe 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0x10); // Set high column address
 8000a38:	2010      	movs	r0, #16
 8000a3a:	f7ff ffbb 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0x40); // Set start line address
 8000a3e:	2040      	movs	r0, #64	@ 0x40
 8000a40:	f7ff ffb8 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0x81); // Set contrast control register
 8000a44:	2081      	movs	r0, #129	@ 0x81
 8000a46:	f7ff ffb5 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0xFF); // Maximum contrast
 8000a4a:	20ff      	movs	r0, #255	@ 0xff
 8000a4c:	f7ff ffb2 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0xA1); // Set segment re-map 0 to 127
 8000a50:	20a1      	movs	r0, #161	@ 0xa1
 8000a52:	f7ff ffaf 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0xA6); // Set normal display
 8000a56:	20a6      	movs	r0, #166	@ 0xa6
 8000a58:	f7ff ffac 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0xA8); // Set multiplex ratio (1 to 64)
 8000a5c:	20a8      	movs	r0, #168	@ 0xa8
 8000a5e:	f7ff ffa9 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0x3F); // 1/64 duty
 8000a62:	203f      	movs	r0, #63	@ 0x3f
 8000a64:	f7ff ffa6 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0xA4); // Output RAM to display
 8000a68:	20a4      	movs	r0, #164	@ 0xa4
 8000a6a:	f7ff ffa3 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0xD3); // Set display offset
 8000a6e:	20d3      	movs	r0, #211	@ 0xd3
 8000a70:	f7ff ffa0 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0x00); // No offset
 8000a74:	2000      	movs	r0, #0
 8000a76:	f7ff ff9d 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0xD5); // Set display clock divide ratio/oscillator frequency
 8000a7a:	20d5      	movs	r0, #213	@ 0xd5
 8000a7c:	f7ff ff9a 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0xF0); // Set divide ratio
 8000a80:	20f0      	movs	r0, #240	@ 0xf0
 8000a82:	f7ff ff97 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0xD9); // Set pre-charge period
 8000a86:	20d9      	movs	r0, #217	@ 0xd9
 8000a88:	f7ff ff94 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0x22);
 8000a8c:	2022      	movs	r0, #34	@ 0x22
 8000a8e:	f7ff ff91 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0xDA); // Set COM pins hardware configuration
 8000a92:	20da      	movs	r0, #218	@ 0xda
 8000a94:	f7ff ff8e 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0x12);
 8000a98:	2012      	movs	r0, #18
 8000a9a:	f7ff ff8b 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0xDB); // Set vcomh
 8000a9e:	20db      	movs	r0, #219	@ 0xdb
 8000aa0:	f7ff ff88 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0x20); // 0.77x Vcc
 8000aa4:	2020      	movs	r0, #32
 8000aa6:	f7ff ff85 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0x8D); // Set DC-DC enable
 8000aaa:	208d      	movs	r0, #141	@ 0x8d
 8000aac:	f7ff ff82 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0x14);
 8000ab0:	2014      	movs	r0, #20
 8000ab2:	f7ff ff7f 	bl	80009b4 <OLED_send_command>
    OLED_send_command(0xAF); // Display ON
 8000ab6:	20af      	movs	r0, #175	@ 0xaf
 8000ab8:	f7ff ff7c 	bl	80009b4 <OLED_send_command>
    uart_write("OLED set\n\r");
 8000abc:	4802      	ldr	r0, [pc, #8]	@ (8000ac8 <OLED_init+0xb8>)
 8000abe:	f7ff fcc9 	bl	8000454 <uart_write>
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	08000ef8 	.word	0x08000ef8

08000acc <OLED_Fill>:

// Função para limpar o display OLED
void OLED_Fill(uint8_t val) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	if(val > 0xff){
		uart_write("error, tamanho ecedido");
		return;
	}

    for (uint8_t page = 0; page < OLED_PAGES; page++) {
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	73fb      	strb	r3, [r7, #15]
 8000ada:	e01c      	b.n	8000b16 <OLED_Fill+0x4a>
        // Configura o OLED para escrever em cada página
    	OLED_send_command(0xB0 + page);  // Seleciona a página (0 a 7)
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	3b50      	subs	r3, #80	@ 0x50
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ff66 	bl	80009b4 <OLED_send_command>
    	OLED_send_command(0x00);         // Coluna baixa
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff ff63 	bl	80009b4 <OLED_send_command>
    	OLED_send_command(0x10);         // Coluna alta
 8000aee:	2010      	movs	r0, #16
 8000af0:	f7ff ff60 	bl	80009b4 <OLED_send_command>

        // Envia 128 bytes de zeros (0x00) para limpar uma linha inteira
        for (uint8_t col = 0; col < SSD1306_coluna; col++) {
 8000af4:	2300      	movs	r3, #0
 8000af6:	73bb      	strb	r3, [r7, #14]
 8000af8:	e006      	b.n	8000b08 <OLED_Fill+0x3c>
        	OLED_send_data(val);  // 0x00 representa uma linha de pixels "desligados"
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff70 	bl	80009e2 <OLED_send_data>
        for (uint8_t col = 0; col < SSD1306_coluna; col++) {
 8000b02:	7bbb      	ldrb	r3, [r7, #14]
 8000b04:	3301      	adds	r3, #1
 8000b06:	73bb      	strb	r3, [r7, #14]
 8000b08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	daf4      	bge.n	8000afa <OLED_Fill+0x2e>
    for (uint8_t page = 0; page < OLED_PAGES; page++) {
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	3301      	adds	r3, #1
 8000b14:	73fb      	strb	r3, [r7, #15]
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d9df      	bls.n	8000adc <OLED_Fill+0x10>
        }
    }
}
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <OLED_DrawChar>:

void OLED_DrawChar(uint8_t x, uint8_t y, char c) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	71bb      	strb	r3, [r7, #6]
 8000b32:	4613      	mov	r3, r2
 8000b34:	717b      	strb	r3, [r7, #5]

    // Seleciona a página (linha de pixels de 8 bits de altura)
	OLED_send_command(0xB0 + (y / 8));       // Seleciona a página (Y dividido por 8)
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	08db      	lsrs	r3, r3, #3
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	3b50      	subs	r3, #80	@ 0x50
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff37 	bl	80009b4 <OLED_send_command>
	OLED_send_command(0x00 + (x & 0x0F));    // Coluna baixa
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 030f 	and.w	r3, r3, #15
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ff30 	bl	80009b4 <OLED_send_command>
	OLED_send_command(0x10 + ((x >> 4) & 0x0F)); // Coluna alta
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	091b      	lsrs	r3, r3, #4
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	3310      	adds	r3, #16
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff28 	bl	80009b4 <OLED_send_command>

    for (int i = 0; i < 5; i++) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	e010      	b.n	8000b8c <OLED_DrawChar+0x68>
    	OLED_send_data(font5x7[c - 32][i]);  // Envia os bytes da fonte
 8000b6a:	797b      	ldrb	r3, [r7, #5]
 8000b6c:	f1a3 0220 	sub.w	r2, r3, #32
 8000b70:	490b      	ldr	r1, [pc, #44]	@ (8000ba0 <OLED_DrawChar+0x7c>)
 8000b72:	4613      	mov	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4413      	add	r3, r2
 8000b78:	18ca      	adds	r2, r1, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff2e 	bl	80009e2 <OLED_send_data>
    for (int i = 0; i < 5; i++) {
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b04      	cmp	r3, #4
 8000b90:	ddeb      	ble.n	8000b6a <OLED_DrawChar+0x46>
    }
    OLED_send_data(0x00);  // Espaçamento entre caracteres
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff ff25 	bl	80009e2 <OLED_send_data>
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	08000f28 	.word	0x08000f28

08000ba4 <OLED_DrawString>:

void OLED_DrawString(uint8_t x, uint8_t y, const char* str) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	603a      	str	r2, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	71bb      	strb	r3, [r7, #6]
    while (*str) {
 8000bb4:	e013      	b.n	8000bde <OLED_DrawString+0x3a>
        OLED_DrawChar(x, y, *str++);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	603a      	str	r2, [r7, #0]
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	79b9      	ldrb	r1, [r7, #6]
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ffae 	bl	8000b24 <OLED_DrawChar>
        x += 6;  // Cada caractere tem 5 pixels de largura, mais 1 pixel de espaço
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	3306      	adds	r3, #6
 8000bcc:	71fb      	strb	r3, [r7, #7]
        if (x + 6 >= SSD1306_coluna) {
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b79      	cmp	r3, #121	@ 0x79
 8000bd2:	d904      	bls.n	8000bde <OLED_DrawString+0x3a>
            x = 0;     // Move para o início da próxima linha
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	71fb      	strb	r3, [r7, #7]
            y += 8;    // Avança para a próxima página
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	3308      	adds	r3, #8
 8000bdc:	71bb      	strb	r3, [r7, #6]
    while (*str) {
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1e7      	bne.n	8000bb6 <OLED_DrawString+0x12>
        }
    }
    atual_x = x;
 8000be6:	4a05      	ldr	r2, [pc, #20]	@ (8000bfc <OLED_DrawString+0x58>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	7013      	strb	r3, [r2, #0]
    atual_y = y;
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <OLED_DrawString+0x5c>)
 8000bee:	79bb      	ldrb	r3, [r7, #6]
 8000bf0:	7013      	strb	r3, [r2, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000036 	.word	0x20000036
 8000c00:	20000037 	.word	0x20000037

08000c04 <Oled_intro>:

void Oled_intro(){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
    OLED_Fill(0x00);
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f7ff ff5f 	bl	8000acc <OLED_Fill>
    TIM2_delay_ms(100);
 8000c0e:	2064      	movs	r0, #100	@ 0x64
 8000c10:	f7ff fd44 	bl	800069c <TIM2_delay_ms>
    OLED_Fill(0x01);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f7ff ff59 	bl	8000acc <OLED_Fill>
    TIM2_delay_ms(100);
 8000c1a:	2064      	movs	r0, #100	@ 0x64
 8000c1c:	f7ff fd3e 	bl	800069c <TIM2_delay_ms>
    OLED_Fill(0x10);
 8000c20:	2010      	movs	r0, #16
 8000c22:	f7ff ff53 	bl	8000acc <OLED_Fill>
    TIM2_delay_ms(100);
 8000c26:	2064      	movs	r0, #100	@ 0x64
 8000c28:	f7ff fd38 	bl	800069c <TIM2_delay_ms>
    OLED_Fill(0x00);
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff ff4d 	bl	8000acc <OLED_Fill>
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <OLED_info_dht11>:

void OLED_info_dht11(uint8_t HI, uint8_t HD, uint8_t TI, uint8_t TD){
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4608      	mov	r0, r1
 8000c42:	4611      	mov	r1, r2
 8000c44:	461a      	mov	r2, r3
 8000c46:	4623      	mov	r3, r4
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71bb      	strb	r3, [r7, #6]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	717b      	strb	r3, [r7, #5]
 8000c52:	4613      	mov	r3, r2
 8000c54:	713b      	strb	r3, [r7, #4]

	uint8_t l = 10,h = 10;
 8000c56:	230a      	movs	r3, #10
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	230a      	movs	r3, #10
 8000c5c:	73bb      	strb	r3, [r7, #14]

	intToString(HI,buffer);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	492b      	ldr	r1, [pc, #172]	@ (8000d10 <OLED_info_dht11+0xd8>)
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f860 	bl	8000d28 <intToString>
	OLED_DrawString(l,h,buffer);
 8000c68:	7bb9      	ldrb	r1, [r7, #14]
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	4a28      	ldr	r2, [pc, #160]	@ (8000d10 <OLED_info_dht11+0xd8>)
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff98 	bl	8000ba4 <OLED_DrawString>

	OLED_DrawString(atual_x,atual_y,".");
 8000c74:	4b27      	ldr	r3, [pc, #156]	@ (8000d14 <OLED_info_dht11+0xdc>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4a27      	ldr	r2, [pc, #156]	@ (8000d18 <OLED_info_dht11+0xe0>)
 8000c7a:	7811      	ldrb	r1, [r2, #0]
 8000c7c:	4a27      	ldr	r2, [pc, #156]	@ (8000d1c <OLED_info_dht11+0xe4>)
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff90 	bl	8000ba4 <OLED_DrawString>

	intToString(HD,buffer);
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	4922      	ldr	r1, [pc, #136]	@ (8000d10 <OLED_info_dht11+0xd8>)
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 f84d 	bl	8000d28 <intToString>
	OLED_DrawString(atual_x,atual_y,buffer);
 8000c8e:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <OLED_info_dht11+0xdc>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	4a21      	ldr	r2, [pc, #132]	@ (8000d18 <OLED_info_dht11+0xe0>)
 8000c94:	7811      	ldrb	r1, [r2, #0]
 8000c96:	4a1e      	ldr	r2, [pc, #120]	@ (8000d10 <OLED_info_dht11+0xd8>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff83 	bl	8000ba4 <OLED_DrawString>

	OLED_DrawString(atual_x,atual_y," % DE HUMILDADE");
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <OLED_info_dht11+0xdc>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8000d18 <OLED_info_dht11+0xe0>)
 8000ca4:	7811      	ldrb	r1, [r2, #0]
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d20 <OLED_info_dht11+0xe8>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff7b 	bl	8000ba4 <OLED_DrawString>

	l = 10;
 8000cae:	230a      	movs	r3, #10
 8000cb0:	73fb      	strb	r3, [r7, #15]
	h = 30;
 8000cb2:	231e      	movs	r3, #30
 8000cb4:	73bb      	strb	r3, [r7, #14]

	intToString(TI,buffer);
 8000cb6:	797b      	ldrb	r3, [r7, #5]
 8000cb8:	4915      	ldr	r1, [pc, #84]	@ (8000d10 <OLED_info_dht11+0xd8>)
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f834 	bl	8000d28 <intToString>
	OLED_DrawString(l,h,buffer);
 8000cc0:	7bb9      	ldrb	r1, [r7, #14]
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <OLED_info_dht11+0xd8>)
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff6c 	bl	8000ba4 <OLED_DrawString>

	OLED_DrawString(atual_x,atual_y,".");
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <OLED_info_dht11+0xdc>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4a11      	ldr	r2, [pc, #68]	@ (8000d18 <OLED_info_dht11+0xe0>)
 8000cd2:	7811      	ldrb	r1, [r2, #0]
 8000cd4:	4a11      	ldr	r2, [pc, #68]	@ (8000d1c <OLED_info_dht11+0xe4>)
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ff64 	bl	8000ba4 <OLED_DrawString>

	intToString(TD,buffer);
 8000cdc:	793b      	ldrb	r3, [r7, #4]
 8000cde:	490c      	ldr	r1, [pc, #48]	@ (8000d10 <OLED_info_dht11+0xd8>)
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 f821 	bl	8000d28 <intToString>
	OLED_DrawString(atual_x,atual_y,buffer);
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <OLED_info_dht11+0xdc>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4a0b      	ldr	r2, [pc, #44]	@ (8000d18 <OLED_info_dht11+0xe0>)
 8000cec:	7811      	ldrb	r1, [r2, #0]
 8000cee:	4a08      	ldr	r2, [pc, #32]	@ (8000d10 <OLED_info_dht11+0xd8>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff57 	bl	8000ba4 <OLED_DrawString>

	OLED_DrawString(atual_x,atual_y," C DE CABACO");
 8000cf6:	4b07      	ldr	r3, [pc, #28]	@ (8000d14 <OLED_info_dht11+0xdc>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	4a07      	ldr	r2, [pc, #28]	@ (8000d18 <OLED_info_dht11+0xe0>)
 8000cfc:	7811      	ldrb	r1, [r2, #0]
 8000cfe:	4a09      	ldr	r2, [pc, #36]	@ (8000d24 <OLED_info_dht11+0xec>)
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff4f 	bl	8000ba4 <OLED_DrawString>


}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd90      	pop	{r4, r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000020 	.word	0x20000020
 8000d14:	20000036 	.word	0x20000036
 8000d18:	20000037 	.word	0x20000037
 8000d1c:	08000f04 	.word	0x08000f04
 8000d20:	08000f08 	.word	0x08000f08
 8000d24:	08000f18 	.word	0x08000f18

08000d28 <intToString>:

void intToString(uint8_t num, char* str){
 8000d28:	b480      	push	{r7}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	75fb      	strb	r3, [r7, #23]
    do {
        buffer[i++] = (num % 10) + '0'; // Adiciona o dígito à string
 8000d38:	79fa      	ldrb	r2, [r7, #7]
 8000d3a:	4b25      	ldr	r3, [pc, #148]	@ (8000dd0 <intToString+0xa8>)
 8000d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8000d40:	08d9      	lsrs	r1, r3, #3
 8000d42:	460b      	mov	r3, r1
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	440b      	add	r3, r1
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	7dfb      	ldrb	r3, [r7, #23]
 8000d50:	1c59      	adds	r1, r3, #1
 8000d52:	75f9      	strb	r1, [r7, #23]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <intToString+0xac>)
 8000d5e:	545a      	strb	r2, [r3, r1]
        num /= 10; // Divide o número por 10
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd0 <intToString+0xa8>)
 8000d64:	fba2 2303 	umull	r2, r3, r2, r3
 8000d68:	08db      	lsrs	r3, r3, #3
 8000d6a:	71fb      	strb	r3, [r7, #7]
    } while (num > 0);
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1e2      	bne.n	8000d38 <intToString+0x10>

    buffer[i] = '\0';
 8000d72:	7dfb      	ldrb	r3, [r7, #23]
 8000d74:	4a17      	ldr	r2, [pc, #92]	@ (8000dd4 <intToString+0xac>)
 8000d76:	2100      	movs	r1, #0
 8000d78:	54d1      	strb	r1, [r2, r3]

    for (int j = 0; j < i / 2; j++) {
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	e019      	b.n	8000db4 <intToString+0x8c>
        char temp = buffer[j];
 8000d80:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <intToString+0xac>)
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	73fb      	strb	r3, [r7, #15]
        buffer[j] = buffer[i - j - 1];
 8000d8a:	7dfa      	ldrb	r2, [r7, #23]
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	3b01      	subs	r3, #1
 8000d92:	4a10      	ldr	r2, [pc, #64]	@ (8000dd4 <intToString+0xac>)
 8000d94:	5cd1      	ldrb	r1, [r2, r3]
 8000d96:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd4 <intToString+0xac>)
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	701a      	strb	r2, [r3, #0]
        buffer[i - j - 1] = temp;
 8000da0:	7dfa      	ldrb	r2, [r7, #23]
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	3b01      	subs	r3, #1
 8000da8:	490a      	ldr	r1, [pc, #40]	@ (8000dd4 <intToString+0xac>)
 8000daa:	7bfa      	ldrb	r2, [r7, #15]
 8000dac:	54ca      	strb	r2, [r1, r3]
    for (int j = 0; j < i / 2; j++) {
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	3301      	adds	r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	085b      	lsrs	r3, r3, #1
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	dbde      	blt.n	8000d80 <intToString+0x58>
    }

}
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	371c      	adds	r7, #28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	cccccccd 	.word	0xcccccccd
 8000dd4:	20000020 	.word	0x20000020

08000dd8 <Reset_Handler>:
 8000dd8:	480d      	ldr	r0, [pc, #52]	@ (8000e10 <LoopForever+0x2>)
 8000dda:	4685      	mov	sp, r0
 8000ddc:	f3af 8000 	nop.w
 8000de0:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <LoopForever+0x6>)
 8000de2:	490d      	ldr	r1, [pc, #52]	@ (8000e18 <LoopForever+0xa>)
 8000de4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <LoopForever+0xe>)
 8000de6:	2300      	movs	r3, #0
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:
 8000dea:	58d4      	ldr	r4, [r2, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:
 8000df0:	18c4      	adds	r4, r0, r3
 8000df2:	428c      	cmp	r4, r1
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <LoopForever+0x12>)
 8000df8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e24 <LoopForever+0x16>)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:
 8000e02:	42a2      	cmp	r2, r4
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>
 8000e06:	f000 f811 	bl	8000e2c <__libc_init_array>
 8000e0a:	f7ff f9cd 	bl	80001a8 <main>

08000e0e <LoopForever>:
 8000e0e:	e7fe      	b.n	8000e0e <LoopForever>
 8000e10:	20005000 	.word	0x20005000
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	08001078 	.word	0x08001078
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000038 	.word	0x20000038

08000e28 <ADC1_2_IRQHandler>:
 8000e28:	e7fe      	b.n	8000e28 <ADC1_2_IRQHandler>
	...

08000e2c <__libc_init_array>:
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	2600      	movs	r6, #0
 8000e30:	4d0c      	ldr	r5, [pc, #48]	@ (8000e64 <__libc_init_array+0x38>)
 8000e32:	4c0d      	ldr	r4, [pc, #52]	@ (8000e68 <__libc_init_array+0x3c>)
 8000e34:	1b64      	subs	r4, r4, r5
 8000e36:	10a4      	asrs	r4, r4, #2
 8000e38:	42a6      	cmp	r6, r4
 8000e3a:	d109      	bne.n	8000e50 <__libc_init_array+0x24>
 8000e3c:	f000 f81a 	bl	8000e74 <_init>
 8000e40:	2600      	movs	r6, #0
 8000e42:	4d0a      	ldr	r5, [pc, #40]	@ (8000e6c <__libc_init_array+0x40>)
 8000e44:	4c0a      	ldr	r4, [pc, #40]	@ (8000e70 <__libc_init_array+0x44>)
 8000e46:	1b64      	subs	r4, r4, r5
 8000e48:	10a4      	asrs	r4, r4, #2
 8000e4a:	42a6      	cmp	r6, r4
 8000e4c:	d105      	bne.n	8000e5a <__libc_init_array+0x2e>
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e54:	4798      	blx	r3
 8000e56:	3601      	adds	r6, #1
 8000e58:	e7ee      	b.n	8000e38 <__libc_init_array+0xc>
 8000e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e5e:	4798      	blx	r3
 8000e60:	3601      	adds	r6, #1
 8000e62:	e7f2      	b.n	8000e4a <__libc_init_array+0x1e>
 8000e64:	08001070 	.word	0x08001070
 8000e68:	08001070 	.word	0x08001070
 8000e6c:	08001070 	.word	0x08001070
 8000e70:	08001074 	.word	0x08001074

08000e74 <_init>:
 8000e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e76:	bf00      	nop
 8000e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7a:	bc08      	pop	{r3}
 8000e7c:	469e      	mov	lr, r3
 8000e7e:	4770      	bx	lr

08000e80 <_fini>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	bf00      	nop
 8000e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e86:	bc08      	pop	{r3}
 8000e88:	469e      	mov	lr, r3
 8000e8a:	4770      	bx	lr
