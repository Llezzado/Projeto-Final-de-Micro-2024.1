
BM_USART_RXIRQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000314  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000444  0800044c  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000444  08000444  0000144c  2**0
                  CONTENTS
  4 .ARM          00000000  08000444  08000444  0000144c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000444  0800044c  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000444  08000444  00001444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000448  08000448  00001448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800044c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800044c  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000551  00000000  00000000  00001475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000019f  00000000  00000000  000019c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00001b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000039  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff3c  00000000  00000000  00001bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005a7  00000000  00000000  00011b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000547ad  00000000  00000000  000120dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00066889  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a0  00000000  00000000  000668cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0006696c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800042c 	.word	0x0800042c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800042c 	.word	0x0800042c

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <USART1_IRQHandler>:

char ch = '\0';
uint8_t MAIN_SM = 0;

void USART1_IRQHandler(void)
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
	/*Check the interrupt source*/
	if((USART1->SR&USART_SR_RXNE)) /*Received a character*/
 80001ac:	4b08      	ldr	r3, [pc, #32]	@ (80001d0 <USART1_IRQHandler+0x28>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	f003 0320 	and.w	r3, r3, #32
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d007      	beq.n	80001c8 <USART1_IRQHandler+0x20>
	{
		/*Read data*/
		ch = USART1->DR;
 80001b8:	4b05      	ldr	r3, [pc, #20]	@ (80001d0 <USART1_IRQHandler+0x28>)
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	b2da      	uxtb	r2, r3
 80001be:	4b05      	ldr	r3, [pc, #20]	@ (80001d4 <USART1_IRQHandler+0x2c>)
 80001c0:	701a      	strb	r2, [r3, #0]
		MAIN_SM = 1;
 80001c2:	4b05      	ldr	r3, [pc, #20]	@ (80001d8 <USART1_IRQHandler+0x30>)
 80001c4:	2201      	movs	r2, #1
 80001c6:	701a      	strb	r2, [r3, #0]
	}
}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	40013800 	.word	0x40013800
 80001d4:	2000001c 	.word	0x2000001c
 80001d8:	2000001d 	.word	0x2000001d

080001dc <main>:

int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0

	/*UART1 Pin configuration*/
	//enable clock access to GPIOA
	RCC->APB2ENR|=RCC_APB2ENR_IOPAEN;
 80001e0:	4b65      	ldr	r3, [pc, #404]	@ (8000378 <main+0x19c>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	4a64      	ldr	r2, [pc, #400]	@ (8000378 <main+0x19c>)
 80001e6:	f043 0304 	orr.w	r3, r3, #4
 80001ea:	6193      	str	r3, [r2, #24]

	//Configure PA10(RX) as as input floating as following
	GPIOA->CRH &= 0xFFFFF0FF;
 80001ec:	4b63      	ldr	r3, [pc, #396]	@ (800037c <main+0x1a0>)
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	4a62      	ldr	r2, [pc, #392]	@ (800037c <main+0x1a0>)
 80001f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80001f6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x00000400;
 80001f8:	4b60      	ldr	r3, [pc, #384]	@ (800037c <main+0x1a0>)
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	4a5f      	ldr	r2, [pc, #380]	@ (800037c <main+0x1a0>)
 80001fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000202:	6053      	str	r3, [r2, #4]

	/*GPIO PB-8 configuration for DEBUG*/
	/*GPIO PB-6,7,9 for LED RGB application*/
	//enable clock access to GPIOB
	RCC->APB2ENR|=RCC_APB2ENR_IOPBEN;
 8000204:	4b5c      	ldr	r3, [pc, #368]	@ (8000378 <main+0x19c>)
 8000206:	699b      	ldr	r3, [r3, #24]
 8000208:	4a5b      	ldr	r2, [pc, #364]	@ (8000378 <main+0x19c>)
 800020a:	f043 0308 	orr.w	r3, r3, #8
 800020e:	6193      	str	r3, [r2, #24]
	GPIOB->CRL &= 0x00FFFFFF;
 8000210:	4b5b      	ldr	r3, [pc, #364]	@ (8000380 <main+0x1a4>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a5a      	ldr	r2, [pc, #360]	@ (8000380 <main+0x1a4>)
 8000216:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800021a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= 0x22000000;
 800021c:	4b58      	ldr	r3, [pc, #352]	@ (8000380 <main+0x1a4>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a57      	ldr	r2, [pc, #348]	@ (8000380 <main+0x1a4>)
 8000222:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 8000226:	6013      	str	r3, [r2, #0]
	GPIOB->CRH &= 0xFFFFFF00;
 8000228:	4b55      	ldr	r3, [pc, #340]	@ (8000380 <main+0x1a4>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	4a54      	ldr	r2, [pc, #336]	@ (8000380 <main+0x1a4>)
 800022e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000232:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= 0x00000022;
 8000234:	4b52      	ldr	r3, [pc, #328]	@ (8000380 <main+0x1a4>)
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	4a51      	ldr	r2, [pc, #324]	@ (8000380 <main+0x1a4>)
 800023a:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 800023e:	6053      	str	r3, [r2, #4]

	GPIOB->ODR &= 0x00000000;
 8000240:	4b4f      	ldr	r3, [pc, #316]	@ (8000380 <main+0x1a4>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	4b4e      	ldr	r3, [pc, #312]	@ (8000380 <main+0x1a4>)
 8000246:	2200      	movs	r2, #0
 8000248:	60da      	str	r2, [r3, #12]

	/*USART1 configuration*/

	//enable clock access to USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800024a:	4b4b      	ldr	r3, [pc, #300]	@ (8000378 <main+0x19c>)
 800024c:	699b      	ldr	r3, [r3, #24]
 800024e:	4a4a      	ldr	r2, [pc, #296]	@ (8000378 <main+0x19c>)
 8000250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000254:	6193      	str	r3, [r2, #24]
	//Enable receiver
	USART1->CR1 |= USART_CR1_RE;
 8000256:	4b4b      	ldr	r3, [pc, #300]	@ (8000384 <main+0x1a8>)
 8000258:	68db      	ldr	r3, [r3, #12]
 800025a:	4a4a      	ldr	r2, [pc, #296]	@ (8000384 <main+0x1a8>)
 800025c:	f043 0304 	orr.w	r3, r3, #4
 8000260:	60d3      	str	r3, [r2, #12]
	//Set Baud Rate
	USART1->BRR = ((CPU_CLK + (BaudRate/2U))/BaudRate);
 8000262:	4b48      	ldr	r3, [pc, #288]	@ (8000384 <main+0x1a8>)
 8000264:	2245      	movs	r2, #69	@ 0x45
 8000266:	609a      	str	r2, [r3, #8]
	//Enable RXNIE interrupt
	USART1->CR1|=USART_CR1_RXNEIE;
 8000268:	4b46      	ldr	r3, [pc, #280]	@ (8000384 <main+0x1a8>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	4a45      	ldr	r2, [pc, #276]	@ (8000384 <main+0x1a8>)
 800026e:	f043 0320 	orr.w	r3, r3, #32
 8000272:	60d3      	str	r3, [r2, #12]
	//Enable USART1 interrupt in NVIC
	NVIC_EnableIRQ(USART1_IRQn);
 8000274:	2025      	movs	r0, #37	@ 0x25
 8000276:	f7ff ff7b 	bl	8000170 <__NVIC_EnableIRQ>
	//Enable UART
	USART1->CR1 |= USART_CR1_UE;
 800027a:	4b42      	ldr	r3, [pc, #264]	@ (8000384 <main+0x1a8>)
 800027c:	68db      	ldr	r3, [r3, #12]
 800027e:	4a41      	ldr	r2, [pc, #260]	@ (8000384 <main+0x1a8>)
 8000280:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000284:	60d3      	str	r3, [r2, #12]

	while(1)
	{
		if(MAIN_SM)
 8000286:	4b40      	ldr	r3, [pc, #256]	@ (8000388 <main+0x1ac>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0fb      	beq.n	8000286 <main+0xaa>
		{
			MAIN_SM = 0;
 800028e:	4b3e      	ldr	r3, [pc, #248]	@ (8000388 <main+0x1ac>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
			switch(ch)
 8000294:	4b3d      	ldr	r3, [pc, #244]	@ (800038c <main+0x1b0>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b67      	cmp	r3, #103	@ 0x67
 800029a:	dc53      	bgt.n	8000344 <main+0x168>
 800029c:	2b42      	cmp	r3, #66	@ 0x42
 800029e:	dbf2      	blt.n	8000286 <main+0xaa>
 80002a0:	3b42      	subs	r3, #66	@ 0x42
 80002a2:	2b25      	cmp	r3, #37	@ 0x25
 80002a4:	d8ef      	bhi.n	8000286 <main+0xaa>
 80002a6:	a201      	add	r2, pc, #4	@ (adr r2, 80002ac <main+0xd0>)
 80002a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ac:	08000365 	.word	0x08000365
 80002b0:	08000287 	.word	0x08000287
 80002b4:	08000287 	.word	0x08000287
 80002b8:	08000287 	.word	0x08000287
 80002bc:	08000287 	.word	0x08000287
 80002c0:	08000357 	.word	0x08000357
 80002c4:	08000287 	.word	0x08000287
 80002c8:	08000287 	.word	0x08000287
 80002cc:	08000287 	.word	0x08000287
 80002d0:	08000287 	.word	0x08000287
 80002d4:	08000287 	.word	0x08000287
 80002d8:	08000287 	.word	0x08000287
 80002dc:	08000287 	.word	0x08000287
 80002e0:	08000287 	.word	0x08000287
 80002e4:	08000287 	.word	0x08000287
 80002e8:	08000287 	.word	0x08000287
 80002ec:	08000349 	.word	0x08000349
 80002f0:	08000287 	.word	0x08000287
 80002f4:	08000287 	.word	0x08000287
 80002f8:	08000287 	.word	0x08000287
 80002fc:	08000287 	.word	0x08000287
 8000300:	08000287 	.word	0x08000287
 8000304:	08000287 	.word	0x08000287
 8000308:	08000287 	.word	0x08000287
 800030c:	08000287 	.word	0x08000287
 8000310:	08000287 	.word	0x08000287
 8000314:	08000287 	.word	0x08000287
 8000318:	08000287 	.word	0x08000287
 800031c:	08000287 	.word	0x08000287
 8000320:	08000287 	.word	0x08000287
 8000324:	08000287 	.word	0x08000287
 8000328:	08000287 	.word	0x08000287
 800032c:	08000365 	.word	0x08000365
 8000330:	08000287 	.word	0x08000287
 8000334:	08000287 	.word	0x08000287
 8000338:	08000287 	.word	0x08000287
 800033c:	08000287 	.word	0x08000287
 8000340:	08000357 	.word	0x08000357
 8000344:	2b72      	cmp	r3, #114	@ 0x72
 8000346:	d19e      	bne.n	8000286 <main+0xaa>
			{
			case 'R':
			case 'r':
				GPIOB->ODR ^= 0x00000040;
 8000348:	4b0d      	ldr	r3, [pc, #52]	@ (8000380 <main+0x1a4>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	4a0c      	ldr	r2, [pc, #48]	@ (8000380 <main+0x1a4>)
 800034e:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8000352:	60d3      	str	r3, [r2, #12]
				break;
 8000354:	e00e      	b.n	8000374 <main+0x198>
			case 'G':
			case 'g':
				GPIOB->ODR ^= 0x00000080;
 8000356:	4b0a      	ldr	r3, [pc, #40]	@ (8000380 <main+0x1a4>)
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	4a09      	ldr	r2, [pc, #36]	@ (8000380 <main+0x1a4>)
 800035c:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8000360:	60d3      	str	r3, [r2, #12]
				break;
 8000362:	e007      	b.n	8000374 <main+0x198>
			case 'B':
			case 'b':
				GPIOB->ODR ^= 0x00000200;
 8000364:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <main+0x1a4>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4a05      	ldr	r2, [pc, #20]	@ (8000380 <main+0x1a4>)
 800036a:	f483 7300 	eor.w	r3, r3, #512	@ 0x200
 800036e:	60d3      	str	r3, [r2, #12]
				break;
 8000370:	bf00      	nop
 8000372:	e788      	b.n	8000286 <main+0xaa>
		if(MAIN_SM)
 8000374:	e787      	b.n	8000286 <main+0xaa>
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40010800 	.word	0x40010800
 8000380:	40010c00 	.word	0x40010c00
 8000384:	40013800 	.word	0x40013800
 8000388:	2000001d 	.word	0x2000001d
 800038c:	2000001c 	.word	0x2000001c

08000390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000390:	480d      	ldr	r0, [pc, #52]	@ (80003c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000392:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000394:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <LoopForever+0x6>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	@ (80003d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <LoopForever+0xe>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	@ (80003dc <LoopForever+0x16>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003be:	f000 f811 	bl	80003e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c2:	f7ff ff0b 	bl	80001dc <main>

080003c6 <LoopForever>:

LoopForever:
  b LoopForever
 80003c6:	e7fe      	b.n	80003c6 <LoopForever>
  ldr   r0, =_estack
 80003c8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d4:	0800044c 	.word	0x0800044c
  ldr r2, =_sbss
 80003d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003dc:	20000020 	.word	0x20000020

080003e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC1_2_IRQHandler>
	...

080003e4 <__libc_init_array>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	2600      	movs	r6, #0
 80003e8:	4d0c      	ldr	r5, [pc, #48]	@ (800041c <__libc_init_array+0x38>)
 80003ea:	4c0d      	ldr	r4, [pc, #52]	@ (8000420 <__libc_init_array+0x3c>)
 80003ec:	1b64      	subs	r4, r4, r5
 80003ee:	10a4      	asrs	r4, r4, #2
 80003f0:	42a6      	cmp	r6, r4
 80003f2:	d109      	bne.n	8000408 <__libc_init_array+0x24>
 80003f4:	f000 f81a 	bl	800042c <_init>
 80003f8:	2600      	movs	r6, #0
 80003fa:	4d0a      	ldr	r5, [pc, #40]	@ (8000424 <__libc_init_array+0x40>)
 80003fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000428 <__libc_init_array+0x44>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	42a6      	cmp	r6, r4
 8000404:	d105      	bne.n	8000412 <__libc_init_array+0x2e>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	f855 3b04 	ldr.w	r3, [r5], #4
 800040c:	4798      	blx	r3
 800040e:	3601      	adds	r6, #1
 8000410:	e7ee      	b.n	80003f0 <__libc_init_array+0xc>
 8000412:	f855 3b04 	ldr.w	r3, [r5], #4
 8000416:	4798      	blx	r3
 8000418:	3601      	adds	r6, #1
 800041a:	e7f2      	b.n	8000402 <__libc_init_array+0x1e>
 800041c:	08000444 	.word	0x08000444
 8000420:	08000444 	.word	0x08000444
 8000424:	08000444 	.word	0x08000444
 8000428:	08000448 	.word	0x08000448

0800042c <_init>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr

08000438 <_fini>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr
